import{_ as s,o as a,c as n,V as e}from"./chunks/framework.364d6ed5.js";const d=JSON.parse('{"title":"View Engines","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/going-deeper/view-engines.md","filePath":"documentation/going-deeper/view-engines.md","lastUpdated":1741705234000}'),l={name:"documentation/going-deeper/view-engines.md"},o=e(`<h1 id="view-engines" tabindex="-1">View Engines <a class="header-anchor" href="#view-engines" aria-label="Permalink to &quot;View Engines&quot;">​</a></h1><p>In order to use one of the supported templating systems, you need to edit <code>app/Core/View</code> in your plugin or theme project and extend the relevant base class. The code for each of the options is below.</p><p>This is done for you automatically when you select a view engine using forme codegen to generate your initial boilerplate - we&#39;re outlining the code below if you need to do this manually.</p><h2 id="legacy-plates-4" tabindex="-1"><a href="https://github.com/thephpleague/plates/tree/legacy-v4" target="_blank" rel="noreferrer">Legacy Plates 4</a> <a class="header-anchor" href="#legacy-plates-4" aria-label="Permalink to &quot;[Legacy Plates 4](https://github.com/thephpleague/plates/tree/legacy-v4)&quot;">​</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Core/View.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VendorName</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">NameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">View</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">LegacyPlatesView</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LegacyPlatesView</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>This one is Forme&#39;s default, even though Plates 4 Alpha has actually been abandoned. The maintainer&#39;s development is currently focussed on Plates 3 below.</p><p>Why is this the default? This is partly a historical choice - we use it ourselves for most client projects and will therefore continue to support it - we find its slightly terser syntax is a marked improvement over v3.</p><p>We&#39;ve forked Plates 4 Alpha and included it in Forme&#39;s core, so it won&#39;t be going away any time soon. We&#39;re not currently planning on adding any major new features, but will fix any critical bugs that crop up.</p><h3 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h3><p>We&#39;ve added some template error exceptions to enforce proper template syntax style, specifically:</p><ol><li>No one line if statements</li><li>No multi-line php statements</li><li>No more than one statement per line</li><li>No use of echo</li><li>No variable assignment</li><li>Short/alternative syntax only for control structures</li></ol><p>These are quite useful to ensure old school WordPress patterns don&#39;t creep in, but YMMV. You can switch them off by setting the global constant <code>FORME_PLATES_VALIDATION</code> to <code>false</code> in your <code>wp-config.php</code>.</p><h3 id="phtml-support" tabindex="-1">phtml support <a class="header-anchor" href="#phtml-support" aria-label="Permalink to &quot;phtml support&quot;">​</a></h3><p>If for any reason you don&#39;t want to use files with the <code>.php</code> extension, you can also use <code>.phtml</code> to differentiate them and Forme will pick these up.</p><h3 id="further-documentation" tabindex="-1">Further documentation <a class="header-anchor" href="#further-documentation" aria-label="Permalink to &quot;Further documentation&quot;">​</a></h3><p>We will also be looking at porting over the Plates 4 documentation in due course.</p><h2 id="plates" tabindex="-1"><a href="https://platesphp.com/" target="_blank" rel="noreferrer">Plates</a> <a class="header-anchor" href="#plates" aria-label="Permalink to &quot;[Plates](https://platesphp.com/)&quot;">​</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Core/View.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VendorName</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">NameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">View</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">PlatesView</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlatesView</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>This is the currently maintained version. The main advantage of Plates over other options is that it&#39;s essentially just php, so there is no syntax as such to learn, although there are helper methods. It&#39;s more about following a set of conventions.</p><h2 id="blade" tabindex="-1"><a href="https://laravel.com/docs/10.x/blade" target="_blank" rel="noreferrer">Blade</a> <a class="header-anchor" href="#blade" aria-label="Permalink to &quot;[Blade](https://laravel.com/docs/10.x/blade)&quot;">​</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Core/View.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VendorName</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">NameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">View</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">BladeView</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BladeView</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>This is of course Laravel&#39;s view engine, which is in fact originally based on .net&#39;s <a href="https://docs.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c" target="_blank" rel="noreferrer">Razor</a>.</p><p>Forme uses <a href="https://github.com/jenssegers/blade" target="_blank" rel="noreferrer">jenssegers/blade</a> under the hood.</p><h3 id="caching" tabindex="-1">Caching <a class="header-anchor" href="#caching" aria-label="Permalink to &quot;Caching&quot;">​</a></h3><p>You will find the cache folder at <code>FORME_PRIVATE_ROOT/view-cache</code> in case you need to purge/delete it. We&#39;ll be adding a codegen command for this at some point, but you can <code>rm -r</code> it for now.</p><h3 id="directives" tabindex="-1">Directives <a class="header-anchor" href="#directives" aria-label="Permalink to &quot;Directives&quot;">​</a></h3><p>All the directives from <a href="https://log1x.github.io/sage-directives-docs/" target="_blank" rel="noreferrer">Sage Directives</a> are available in Blade templates. We haven&#39;t tested all of them - but they should mostly work so long as they don&#39;t use any Sage specific functionality. You can call arbitrary php functions within blade in any case, so these are mostly for convenience/syntactic sugar.</p><p>We&#39;ll look at providing a way of adding custom blade directives from within forme projects in a future release.</p><h2 id="twig" tabindex="-1"><a href="https://twig.symfony.com/" target="_blank" rel="noreferrer">Twig</a> <a class="header-anchor" href="#twig" aria-label="Permalink to &quot;[Twig](https://twig.symfony.com/)&quot;">​</a></h2><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Core/View.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VendorName</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">NameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">View</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">TwigView</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TwigView</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Twig is Symfony&#39;s view engine. It&#39;s a little more verbose than the other options, and doesn&#39;t allow any arbitrary php.</p><h3 id="caching-1" tabindex="-1">Caching <a class="header-anchor" href="#caching-1" aria-label="Permalink to &quot;Caching&quot;">​</a></h3><p>The cache will be on if <code>WP_ENV</code> is <code>production</code>, off if it&#39;s <code>development</code>. You can find the cache folder at <code>FORME_PRIVATE_ROOT/view-cache</code> in case you need to purge/delete it.</p><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><p>In Twig you can&#39;t call arbitrary php functions like you can in Blade or Plates files. Forme allows this capability by wrapping them in <code>function</code> or the shortcut <code>fn</code>.</p><div class="language-twig"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">{# single.twig #}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">&lt;!-- Add whatever you need in the head, and then...--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{{ function(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wp_head</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">) }}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">&lt;!-- etc... --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		Copyright &amp;copy; </span><span style="color:#89DDFF;">{{ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">now</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">|</span><span style="color:#82AAFF;">date</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">) }}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{{ fn(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wp_footer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">) }}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>You can also pass arguments into the function as follows.</p><div class="language-twig"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">{# single.twig #}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">admin-tools</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{{ function(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">edit_post_link</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Edit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;span class=&quot;edit-link&quot;&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;/span&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">) }}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,38),p=[o];function t(c,r,i,y,F,D){return a(),n("div",null,p)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
