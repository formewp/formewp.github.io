import{_ as e,o as s,c as a,V as o}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/getting-started/docker.md","filePath":"documentation/getting-started/docker.md","lastUpdated":1684568320000}'),n={name:"documentation/getting-started/docker.md"},t=o(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">‚Äã</a></h1><p>The Forme Codegen provides <code>ketch</code> - a useful selection of cli commands to run a basic zero config docker development container - similar in scope to Laravel&#39;s <a href="https://laravel.com/docs/9.x/sail" target="_blank" rel="noreferrer">Sail</a>.</p><h3 id="why-ketch" tabindex="-1">Why &quot;ketch&quot;? <a class="header-anchor" href="#why-ketch" aria-label="Permalink to &quot;Why &quot;ketch&quot;?&quot;">‚Äã</a></h3><ol><li>Because a <a href="https://en.wikipedia.org/wiki/Ketch" target="_blank" rel="noreferrer">ketch</a> is type of small boat which fits in nicely with Docker&#39;s shipping analogies.</li><li>Because it meant we could have a <code>ketch up</code> command üòÇ</li></ol><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">‚Äã</a></h2><ul><li>docker &amp; docker-compose - you can get both of these by installing <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noreferrer">Docker Desktop</a></li><li>wp cli ^2.5</li><li>php ^8.1</li><li>forme codegen ^2.0</li></ul><h2 id="initialise" tabindex="-1">Initialise <a class="header-anchor" href="#initialise" aria-label="Permalink to &quot;Initialise&quot;">‚Äã</a></h2><p>Firsly <code>cd</code> into your base installation and run</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre></div><p>This will create all the relevant docker boilerplate for your project, and should also update your wp config with the relevant db credentials and other settings.</p><p>You can then run</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># üçÖüçÖüçÖ</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span></span></code></pre></div><p>This will spin up your app and mysql containers. This might take a while on first run since it needs to fetch and build images but should be pretty quick on subsequent runs.</p><p>You should be able to access your project from the browser at <code>http://localhost</code> and install WordPress.</p><p>You can run the following to stop and remove the running containers:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">down</span></span></code></pre></div><p>Don&#39;t worry though, your database data is safe. It&#39;s saved to a persistent volume.</p><p>You can also restart containers in one line</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span></span></code></pre></div><h2 id="link-plugin-and-theme-repos" tabindex="-1">Link plugin and theme repos <a class="header-anchor" href="#link-plugin-and-theme-repos" aria-label="Permalink to &quot;Link plugin and theme repos&quot;">‚Äã</a></h2><p>If you&#39;re like us, you&#39;ll want to keep your plugin and theme repos seperate from your base install and symlink them in to keep things better organised. Local symlinks aren&#39;t recognised by docker, so forme ketch provides a convenience command to configure them within <code>docker-compose.yml</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">link</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/your/plugin/or/theme/repo</span></span></code></pre></div><p>You might need to <code>forme ketch down</code> and <code>forme ketch up</code> if you already have running containers.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The link command operates naively and doesn&#39;t perform any kind of checks on the path. We don&#39;t currently have an <code>unlink</code> or <code>undo</code> command, so you&#39;ll need to edit <code>docker-composer.yml</code> manually if you make any mistakes or need to delete something.</p></div><h2 id="list-running-containers" tabindex="-1">List running containers <a class="header-anchor" href="#list-running-containers" aria-label="Permalink to &quot;List running containers&quot;">‚Äã</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span></span></code></pre></div><p>This runs <code>docker-compose ps</code> under the hood.</p><h2 id="running-cli-tools-in-the-container" tabindex="-1">Running cli tools in the container <a class="header-anchor" href="#running-cli-tools-in-the-container" aria-label="Permalink to &quot;Running cli tools in the container&quot;">‚Äã</a></h2><p>The <code>ketch</code> cli provides the ability to run <code>composer</code>, <code>wp</code>, <code>npm</code> and <code>npx</code> within the container.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">require</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo/bar</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">forme-queue</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lerna</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bootstrap</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>One caveat is that command line flags won&#39;t work with any of the above, but you can use <code>shell</code> if you need more advanced shell access within the container.</p></div><h2 id="shell-access" tabindex="-1">Shell access <a class="header-anchor" href="#shell-access" aria-label="Permalink to &quot;Shell access&quot;">‚Äã</a></h2><p>Sometimes you need full shell access to the container in order to run more advanced commands or php scripts.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ketch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shell</span></span></code></pre></div><p>This will give you a bash prompt with root access.</p><h2 id="under-the-hood" tabindex="-1">Under the hood <a class="header-anchor" href="#under-the-hood" aria-label="Permalink to &quot;Under the hood&quot;">‚Äã</a></h2><p>Forme&#39;s <code>ketch</code> configures a basic docker setup based on php@8.1, nginx and mysql@5.7. Two containers and a database persistence volume - no https, apache, dnsmasq or anything else.</p><p>It doesn&#39;t completely remove the need to have tools installed locally, but you <em>can</em> get away with a slightly simpler setup and should be able to get going pretty quickly.</p>`,38),l=[t];function c(p,r,i,d,h,u){return s(),a("div",null,l)}const C=e(n,[["render",c]]);export{m as __pageData,C as default};
