import{_ as e,o as a,c as o,V as t}from"./chunks/framework.364d6ed5.js";const y=JSON.parse('{"title":"Helpers","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/basics/helpers.md","filePath":"documentation/basics/helpers.md","lastUpdated":1686052798000}'),n={name:"documentation/basics/helpers.md"},s=t(`<h1 id="helpers" tabindex="-1">Helpers <a class="header-anchor" href="#helpers" aria-label="Permalink to &quot;Helpers&quot;">â€‹</a></h1><p>Helpers are utility functions, often global, which simplify syntax, particularly within templates.</p><h2 id="built-in-helpers" tabindex="-1">Built in helpers <a class="header-anchor" href="#built-in-helpers" aria-label="Permalink to &quot;Built in helpers&quot;">â€‹</a></h2><p>The following namespaced functions are available across the whole framework. <code>Forme\\getContainer()</code> - get an instance of the DI container, instantiating/configuring if necessary.</p><p><code>Forme\\getInstance($className)</code> - get an instance of a class via the container - you should normally use this instead of <code>new</code></p><p><code>Forme\\makeInstance($className)</code> - get a non singleton instance of a class via the container - you sometimes need this for example when the instance should be locally (rather than globally) stateful</p><p><code>Forme\\loadWhoops()</code> - loads Whoops if dev and not already loaded - used internally, you probably won&#39;t need this</p><p><code>Forme\\loadDotenv()</code> - loads dotenv if file exists and not already loaded - used internally, you probably won&#39;t need this.</p><p><code>Forme\\request()</code> - get an instance of the Server Request</p><p><code>Forme\\log()</code> - get an instance of the Logger</p><p><code>Forme\\arrayKeysToCamelCase($array)</code> - recursively convert all the keys in an array to camelCase.</p><p>The following global functions are available if you are using a Forme theme. These are mostly useful in views.</p><p><code>assets($path)</code> - shortcut for the uri of the static assets directory in the current theme. You can also pass a path relative to the assets directory.</p><p><code>menu()</code> - access the WordPress menu via a convenient Eloquent model. No more painfully weird Nav Walkers ðŸ˜ƒ</p><p><code>option($key)</code> - get an acf option value by key with shorter syntax.</p><p><code>view($viewName, optional $context)</code> - render a view with the given data. You don&#39;t need this in templates (just use the $v instance) but comes in handy in other situations e.g. when you want to render a view in another function.</p><p>The following are still available in themes, but deprecated so you should avoid using them:</p><p><code>render_view($viewName, optional $context)</code> - this is analogous to <code>echo $v-&gt;render()</code> - note that it echoes out the template. It&#39;s deprecated, and you should use <code>view()</code> instead.</p><p><code>nav_menu()</code> - outputs header menu using bootstrap nav walker - an opinionated <code>wp_nav_menu</code>. It&#39;s deprecated, and you should use <code>menu()</code> instead.</p><p>Forme plugins do not come with any built in helpers.</p><h2 id="custom-helpers" tabindex="-1">Custom helpers <a class="header-anchor" href="#custom-helpers" aria-label="Permalink to &quot;Custom helpers&quot;">â€‹</a></h2><p>You can add your own global theme helper functions in <code>helpers/helpers.php</code>.</p><p>You can do the same in plugins, however we recommend namespacing plugin custom helpers to avoid polluting the global namespace too much. The logic being that you might have multiple plugins activated, whereas you&#39;re only ever going to have one theme, so it&#39;s less of an issue - or at least more manageable - for themes.</p><p>You should wrap function declarations in an <code>if (!function_exists())</code> check, since composer does not guarantee that ad hoc files won&#39;t get included twice.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Think carefully before adding helpers for use in templates, they can seem convenient but in practise you might not really need them, and it can become a a bit of an antipattern. For example, consider whether the functionality makes more sense as a service to be called in the controller.</p></div><h2 id="third-party-functions" tabindex="-1">Third party functions <a class="header-anchor" href="#third-party-functions" aria-label="Permalink to &quot;Third party functions&quot;">â€‹</a></h2><p>Aside from WordPress, of course, and ACF, there are also a few additional third party functions available by default.</p><p><a href="https://symfony.com/doc/current/components/string.html" target="_blank" rel="noreferrer">Symfony String</a> is available but needs to be included, so is not really useful for views.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">function</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Symfony</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">u</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// changes all graphemes/code points to camelCase</span></span>
<span class="line"><span style="color:#82AAFF;">u</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Foo: Bar-baz.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">camel</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;fooBarBaz&#39;</span></span></code></pre></div><p><a href="https://symfony.com/doc/current/components/var_dumper.html" target="_blank" rel="noreferrer">Symfony Var Dumper</a> is available globally while you&#39;re in development mode - i.e. <code>dump()</code> and <code>dd()</code> - check <a href="/documentation/development-workflow/debugging.html#var-dumper">debugging</a> for more info.</p><p>Laravel&#39;s default and collection helpers are available, most usefully: <a href="https://laravel.com/docs/9.x/helpers#method-e" target="_blank" rel="noreferrer"><code>e()</code></a>, <a href="https://laravel.com/docs/9.x/helpers#method-env" target="_blank" rel="noreferrer"><code>env()</code></a>, <a href="https://laravel.com/docs/9.x/helpers#method-collect" target="_blank" rel="noreferrer"><code>collect()</code></a> and <a href="https://laravel.com/docs/9.x/helpers#method-tap" target="_blank" rel="noreferrer"><code>tap()</code></a>.</p>`,31),l=[s];function r(c,i,p,d,h,u){return a(),o("div",null,l)}const f=e(n,[["render",r]]);export{y as __pageData,f as default};
