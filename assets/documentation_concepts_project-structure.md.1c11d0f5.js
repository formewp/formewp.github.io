import{_ as s,o as e,c as a,V as n}from"./chunks/framework.364d6ed5.js";const A=JSON.parse('{"title":"Project structure","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/concepts/project-structure.md","filePath":"documentation/concepts/project-structure.md","lastUpdated":1693749006000}'),l={name:"documentation/concepts/project-structure.md"},p=n(`<h1 id="project-structure" tabindex="-1">Project structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project structure&quot;">​</a></h1><p>We&#39;ll now take a look at standard project structure for plugins and themes.</p><h2 id="plugin-structure" tabindex="-1">Plugin structure <a class="header-anchor" href="#plugin-structure" aria-label="Permalink to &quot;Plugin structure&quot;">​</a></h2><p>If you open up a Forme plugin repo directory in your editor of choice, the top level will look something like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .editorconfig</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;">├── app/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── assets/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── cliff.toml</span></span>
<span class="line"><span style="color:#A6ACCD;">├── composer.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── conventional.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── forme.env.example</span></span>
<span class="line"><span style="color:#A6ACCD;">├── helpers/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── index.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── languages/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── captainhook.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── package-lock.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── phpstan.neon.example</span></span>
<span class="line"><span style="color:#A6ACCD;">├── readme.md</span></span>
<span class="line"><span style="color:#A6ACCD;">├── hello-world-plugin.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── routes/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── scripts</span></span>
<span class="line"><span style="color:#A6ACCD;">├── uninstall.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── views/</span></span>
<span class="line"><span style="color:#A6ACCD;">└── webpack.config.js</span></span></code></pre></div><p>Some of the elements will look famliar to you if you&#39;ve done any standard WordPress plugin development, but some details that jump out are the <code>app</code>, <code>views</code> and <code>assets</code> directories and the <code>composer.json</code>. This isn&#39;t your usual WordPress joint.</p><p>This is a fairly typical modern php directory structure:</p><ul><li><code>app</code> is where all your classes and most of your business logic live (also called <code>src</code> in some frameworks)</li><li><code>assets</code> is for frontend files, e.g js, css/scss and images</li><li><code>helpers</code> is for global helper functions</li><li><code>routes</code> is where you define and declare your custom routes</li><li><code>views</code> is where your view templates go. Forme supports <a href="https://laravel.com/docs/10.x/blade" target="_blank" rel="noreferrer">Blade</a>, <a href="https://twig.symfony.com/" target="_blank" rel="noreferrer">Twig</a>, <a href="https://platesphp.com/" target="_blank" rel="noreferrer">Plates</a>, and &quot;legacy&quot; <a href="https://github.com/thephpleague/plates/tree/legacy-v4" target="_blank" rel="noreferrer">Plates 4</a>.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We&#39;re not talking about &quot;templates&quot; in the WordPress sense here (i.e. 1990s era mushed up php and html spaghetti code hell), we mean modern php view templating engines. Forme supports <a href="https://laravel.com/docs/10.x/blade" target="_blank" rel="noreferrer">Blade</a>, <a href="https://twig.symfony.com/" target="_blank" rel="noreferrer">Twig</a> <a href="https://platesphp.com/" target="_blank" rel="noreferrer">Plates</a>, and &quot;legacy&quot; <a href="https://github.com/thephpleague/plates/tree/legacy-v4" target="_blank" rel="noreferrer">Plates 4</a>.</p></div><h2 id="theme-structure" tabindex="-1">Theme structure <a class="header-anchor" href="#theme-structure" aria-label="Permalink to &quot;Theme structure&quot;">​</a></h2><p>There&#39;s a similar thing going on with themes. Again there&#39;s an <code>app</code>, <code>views</code> and <code>assets</code> directory alongside <code>composer.json</code> and some of the standard WordPress files.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .editorconfig</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;">├── app/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── assets/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── captainhook.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── cliff.toml</span></span>
<span class="line"><span style="color:#A6ACCD;">├── composer.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── conventional.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── forme.env.example</span></span>
<span class="line"><span style="color:#A6ACCD;">├── functions.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── helpers/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── index.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── package-lock.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── page.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── phpstan.neon.example</span></span>
<span class="line"><span style="color:#A6ACCD;">├── readme.md</span></span>
<span class="line"><span style="color:#A6ACCD;">├── routes/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── scripts</span></span>
<span class="line"><span style="color:#A6ACCD;">├── screenshot.png</span></span>
<span class="line"><span style="color:#A6ACCD;">├── single.php</span></span>
<span class="line"><span style="color:#A6ACCD;">├── style.css</span></span>
<span class="line"><span style="color:#A6ACCD;">├── views/</span></span>
<span class="line"><span style="color:#A6ACCD;">└── webpack.config.js</span></span></code></pre></div>`,12),o=[p];function t(r,c,i,d,u,C){return e(),a("div",null,o)}const m=s(l,[["render",t]]);export{A as __pageData,m as default};
