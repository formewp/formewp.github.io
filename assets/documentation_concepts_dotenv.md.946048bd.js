import{_ as e,o,c as a,V as s}from"./chunks/framework.364d6ed5.js";const y=JSON.parse('{"title":"Dotenv","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/concepts/dotenv.md","filePath":"documentation/concepts/dotenv.md","lastUpdated":1684512137000}'),n={name:"documentation/concepts/dotenv.md"},t=s(`<h1 id="dotenv" tabindex="-1">Dotenv <a class="header-anchor" href="#dotenv" aria-label="Permalink to &quot;Dotenv&quot;">​</a></h1><p>Forme uses a <a href="https://github.com/vlucas/phpdotenv" target="_blank" rel="noreferrer">dotenv</a> file in which you can set environment variables.</p><p>This should be called either <code>forme.env</code> or <code>.env</code> and placed in <code>FORME_PRIVATE_ROOT</code>, i.e. wherever your <code>vendor</code> folder lives.</p><p>If both of them exist, forme will use <code>forme.env</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># forme.env</span></span>
<span class="line"><span style="color:#A6ACCD;">MY_API_TOKEN</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1d7f8d2e-f744-4321-bec2-9c05e67d4978</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">MY_ENV_VAR</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FooBar</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h2 id="why-dotenv" tabindex="-1">Why dotenv? <a class="header-anchor" href="#why-dotenv" aria-label="Permalink to &quot;Why dotenv?&quot;">​</a></h2><p>You should never store sensitive credentials in your code. Anything that is likely to change between deployment environments – such as database credentials or credentials for 3rd party services – should be extracted from the code into environment variables. The <code>forme.env</code> file should never go into version control since it can contain sensitive API keys and passwords.</p><h2 id="scope-and-dotenv-example-files" tabindex="-1">Scope and dotenv example files <a class="header-anchor" href="#scope-and-dotenv-example-files" aria-label="Permalink to &quot;Scope and dotenv example files&quot;">​</a></h2><p>Our global <code>forme.env</code> covers the whole installation. Plugins and themes can have their own individual <code>forme.env.example</code> which should go into version control. This should show a blueprint of which env variables the plugin or theme needs, with placeholders for any sensitive credentails. These should then be manually added to the global <code>forme.env</code> with the actual variables.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Dotenv examples are also a good place to put helpful comments and instructions for how to actually find or generate these credentials. e.g. Where can it be found in LastPass? What api call do we need to make to create it? Who do you need to ask to get hold of it? etc</p></div><h2 id="doesn-t-wordpress-already-do-this-in-wp-config" tabindex="-1">Doesn&#39;t WordPress already do this in wp-config? <a class="header-anchor" href="#doesn-t-wordpress-already-do-this-in-wp-config" aria-label="Permalink to &quot;Doesn&#39;t WordPress already do this in wp-config?&quot;">​</a></h2><p>Yeah WordPress sets global constants with a similar rationale. The Dotenv pattern is generally considered <a href="https://www.12factor.net/" target="_blank" rel="noreferrer">slightly better practise</a> for values that are likely to change between environments though.</p><p>This means database credentials could arguably also move into the dotenv - Bedrock does this, for example. However Forme&#39;s philosophy is to leave the default WordPress configuration alone as far as possible. Therefore as far as Forme is concerned, what goes in <code>wp-config</code> by default stays in <code>wp-config</code>.</p><h2 id="retrieving-environment-variables" tabindex="-1">Retrieving environment variables <a class="header-anchor" href="#retrieving-environment-variables" aria-label="Permalink to &quot;Retrieving environment variables&quot;">​</a></h2><p>Just use <code>env</code>!</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">myToken </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">env</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MY_API_TOKEN</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">myVar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">env</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MY_ENV_VAR</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span></code></pre></div>`,16),l=[t];function r(i,c,p,d,h,v){return o(),a("div",null,l)}const m=e(n,[["render",r]]);export{y as __pageData,m as default};
