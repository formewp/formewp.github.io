import{_ as e,o as t,c as s,V as o}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"Tests","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/development-workflow/tests.md","filePath":"documentation/development-workflow/tests.md","lastUpdated":1684512137000}'),a={name:"documentation/development-workflow/tests.md"},n=o(`<h1 id="tests" tabindex="-1">Tests <a class="header-anchor" href="#tests" aria-label="Permalink to &quot;Tests&quot;">​</a></h1><h2 id="unit-and-integration-tests" tabindex="-1">Unit and integration tests <a class="header-anchor" href="#unit-and-integration-tests" aria-label="Permalink to &quot;Unit and integration tests&quot;">​</a></h2><p>For unit and integration tests, Forme uses the excellent <a href="https://pestphp.com/" target="_blank" rel="noreferrer">Pest</a>. Pest uses PHPUnit under the hood, but with less boilerplate and a much nicer syntax inspired by <a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a>. If you&#39;ve done any js/ts development, you&#39;ll feel right at home.</p><h3 id="test-server" tabindex="-1">Test server <a class="header-anchor" href="#test-server" aria-label="Permalink to &quot;Test server&quot;">​</a></h3><p>Forme uses a <code>wp-test</code> directory with a full WordPress installation set up for integration and end to end tests, hooked up to an SQLite database, and with your plugin or theme installed via the magic of symlinks. You can use the codegen to set this up:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">setup</span></span></code></pre></div><p>The admin user is <code>admin</code> and the password is <code>password</code>. You can start or stop a local server if you want to inspect it in the browser.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span></span></code></pre></div><p>It will be available to use on <a href="http://localhost:8000." target="_blank" rel="noreferrer">http://localhost:8000</a> While it&#39;s perfectly serviceable as a local development server, bear in mind that the database state won&#39;t persist between integration test runs, so you shouldn&#39;t rely on that aspect of it. If you need something more persistent, you should use Valet or ketch/docker instead.</p><p>One important caveat is that due to core WordPress&#39;s ancient codebase and lack of modern PHP best practises in the plugin ecosystem, testing can be quite the challenge, so there will be bugs and edge cases where things simply don&#39;t work quite as expected. You can usually work around them, but it&#39;s not always plain sailing. So you should consider this feature experimental.</p><h3 id="writing-and-running-tests" tabindex="-1">Writing and running tests <a class="header-anchor" href="#writing-and-running-tests" aria-label="Permalink to &quot;Writing and running tests&quot;">​</a></h3><p>You can write tests within the <code>tests/pest</code> directory under <code>Unit</code> and <code>Integration</code> as relevant.</p><p>We&#39;ll be writing up some documentation here in due course, but for now you should check out the examples in the theme and plugin boilerplates for a steer on how this works, and refer back to Pest&#39;s documentation for the syntax.</p><p>To run your tests you can use any of the following commands</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># shorter alias</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># composer script version</span></span>
<span class="line"><span style="color:#FFCB6B;">./tools/pest</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#  if you need to add any arguments or flags, use this. all of the above run this under the hood anyway.</span></span></code></pre></div><h3 id="swapping-out-sqlite-for-mysql" tabindex="-1">Swapping out SQLite for MySQL <a class="header-anchor" href="#swapping-out-sqlite-for-mysql" aria-label="Permalink to &quot;Swapping out SQLite for MySQL&quot;">​</a></h3><p>SQLite doesn&#39;t play nice with some plugins, for example WooCommerce and WP Cron. For some projects you might need to swap out SQLite for MySQL.</p><p>This will be automated in due course, but for now you can do the following, assuming an existing SQLite based test installatino via <code>forme test setup</code></p><ol><li>Create a test database in your local mysql UI or cli</li><li>Delete <code>wp-test/public/wp-content/db.php</code></li><li>Delete <code>phinx.yml</code> (it will be recreated)</li><li>Manually edit <code>wp-test/public/wp-config.php</code>, change the db credentials and add <code>define(&#39;USE_MYSQL&#39;, true);</code> under <code>define(&#39;WP_ENV&#39;, &#39;testing&#39;);</code> You can also optionally delete or comment out the <code>DB_DIR</code> and <code>DB_FILE</code> lines.</li><li>run <code>wp core install --url=&quot;http://localhost:8000&quot; --title=&quot;Test Site&quot; --admin_user=&quot;admin&quot; --admin_password=&quot;password&quot; --admin_email=&quot;test@example.com&quot;</code></li><li>Activate any required plugins e.g. <code>wp plugin activate advanced-custom-fields</code></li><li>Activate your project&#39;s theme or plugin</li><li>Try running your tests with <code>composer test</code></li></ol><h3 id="end-to-end-tests-coming-soon" tabindex="-1">End to end tests (Coming soon) <a class="header-anchor" href="#end-to-end-tests-coming-soon" aria-label="Permalink to &quot;End to end tests (Coming soon)&quot;">​</a></h3><p>We currently use <a href="https://cypress.io" target="_blank" rel="noreferrer">Cypress</a> for end to end tests on all of our Forme projects.</p><p>We&#39;re still in the process of automating the setup and porting the functionality into the Forme framework. Some of the initial work is already in there if you look closely at recent versions, but as yet undocumented.</p><p>Watch this space!</p>`,23),l=[n];function r(i,p,c,d,u,h){return t(),s("div",null,l)}const f=e(a,[["render",r]]);export{m as __pageData,f as default};
