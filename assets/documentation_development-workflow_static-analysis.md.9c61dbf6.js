import{_ as a,o as e,c as t,V as n}from"./chunks/framework.364d6ed5.js";const _=JSON.parse('{"title":"Static Analysis","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/development-workflow/static-analysis.md","filePath":"documentation/development-workflow/static-analysis.md","lastUpdated":1684512137000}'),s={name:"documentation/development-workflow/static-analysis.md"},o=n('<h1 id="static-analysis" tabindex="-1">Static Analysis <a class="header-anchor" href="#static-analysis" aria-label="Permalink to &quot;Static Analysis&quot;">​</a></h1><h2 id="php-stan" tabindex="-1">PHP Stan <a class="header-anchor" href="#php-stan" aria-label="Permalink to &quot;PHP Stan&quot;">​</a></h2><p>We&#39;re big fans of static analysis and strict typing. It enables you to catch loads of logic bugs before you even run a single line of code, and although it doesn&#39;t obviate the need for them, we find ourselves writing fewer tests.</p><p>Our library of choice is <a href="https://phpstan.org/" target="_blank" rel="noreferrer">PHP Stan</a>. Forme plugin and theme boilerplates come with a <code>phpstan.neon.example</code> that you can edit and set up for your own environment.</p><p>You can run it on the command line within plugin and theme projects via the following composer command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stan</span></span></code></pre></div>',6),i=[o];function l(r,c,p,d,h,m){return e(),t("div",null,i)}const f=a(s,[["render",l]]);export{_ as __pageData,f as default};
