import{_ as a,o as s,c as n,V as o}from"./chunks/framework.364d6ed5.js";const F=JSON.parse('{"title":"Migrations","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/database/migrations.md","filePath":"documentation/database/migrations.md","lastUpdated":1684512137000}'),e={name:"documentation/database/migrations.md"},t=o(`<h1 id="migrations" tabindex="-1">Migrations <a class="header-anchor" href="#migrations" aria-label="Permalink to &quot;Migrations&quot;">​</a></h1><p>Forme supports database schema migrations, and uses <a href="https://phinx.org/" target="_blank" rel="noreferrer">Phinx</a> under the hood.</p><h2 id="what-are-migrations" tabindex="-1">What are migrations? <a class="header-anchor" href="#what-are-migrations" aria-label="Permalink to &quot;What are migrations?&quot;">​</a></h2><p>Migrations are a way to keep your database schema configuration within your codebase, and therefore any changes remain within version control. Migration frameworks usually come with some kind of cli and/or automation meaning that you don&#39;t need to run any ad hoc SQL or make database changes manually. They also usually provide some kind of abstraction/api so that you don&#39;t need write raw SQL.</p><p>In WordPress projects we obviously don&#39;t need to worry about this when we are using WordPress post types etc, but migrations are useful if we need to create some custom tables and objects for our project.</p><h2 id="writing-migrations" tabindex="-1">Writing migrations <a class="header-anchor" href="#writing-migrations" aria-label="Permalink to &quot;Writing migrations&quot;">​</a></h2><p>Migrations live in <code>app/Database/Migrations</code> and extend <code>Phinx\\Migration\\AbstractMigration</code>. The file name format should be <code>YYYYMMDDHHMMSS_my_new_migration.php</code>, where the first 14 characters are replaced with the current timestamp down to the second.</p><p>They normally have a single method <code>change</code>, in which you define the schema changes.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Database/Migrations/20201209100327_create_user_logins_table.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">YourNameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">YourApp</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Database</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Migrations</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Phinx</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Migration</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AbstractMigration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CreateUserLoginsTable</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AbstractMigration</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">change</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// create the table</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">table </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">table</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user_logins</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">table</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">addColumn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">integer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">addColumn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">created</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">datetime</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>You can check the <a href="https://book.cakephp.org/phinx/0/en/migrations.html#working-with-tables" target="_blank" rel="noreferrer">phinx docs</a> for info on how to work with the table object.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should use the code generation cli to create migration files as it will name them properly for you.</p></div><h2 id="running-migrations" tabindex="-1">Running Migrations <a class="header-anchor" href="#running-migrations" aria-label="Permalink to &quot;Running Migrations&quot;">​</a></h2><p>Migrations run automatically on plugin or theme activation. This process also takes care of the phinx configuration for you.</p><p>You can alternatively trigger migrations directly via the phinx cli, but this will only work once the configuration exists, in other words once the activation of your plugin or theme has happened at least once within your project.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Run this from the FORME_PRIVATE_ROOT directory</span></span>
<span class="line"><span style="color:#FFCB6B;">vendor/bin/phinx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">migrate</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The configuration file lives in <code>FORME_PRIVATE_ROOT/phinx.yml</code>. If you need to, you can generate it yourself and/or edit it manually, but we won&#39;t go into that here (check the <a href="https://book.cakephp.org/phinx/0/en/configuration.html" target="_blank" rel="noreferrer">phinx docs</a> for more information). Bear in mind that it is likely to get automatically updated and written over during plugin/theme activation, so YMMV.</p></div><h2 id="code-generation" tabindex="-1">Code Generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code Generation&quot;">​</a></h2><p>You can use the cli to create a blank migration.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">migration</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FooBar</span></span></code></pre></div><p>This will create a new suitably named migration file for you in <code>app/Database/Migrations</code>.</p>`,20),l=[t];function p(r,i,c,y,h,D){return s(),n("div",null,l)}const g=a(e,[["render",p]]);export{F as __pageData,g as default};
