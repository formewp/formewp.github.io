import{_ as s,o as e,c as o,V as a}from"./chunks/framework.364d6ed5.js";const h=JSON.parse('{"title":"Local WordPress Installation","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/getting-started/local-wordpress.md","filePath":"documentation/getting-started/local-wordpress.md","lastUpdated":1717509557000}'),n={name:"documentation/getting-started/local-wordpress.md"},l=a(`<h1 id="local-wordpress-installation" tabindex="-1">Local WordPress Installation <a class="header-anchor" href="#local-wordpress-installation" aria-label="Permalink to &quot;Local WordPress Installation&quot;">​</a></h1><p>This will explain how to set up a local WordPress installation to work with Forme. This assumes you have already set up your local development environment.</p><p>To begin with, set up a fresh database to use for your project.</p><h2 id="forme-base" tabindex="-1">Forme Base <a class="header-anchor" href="#forme-base" aria-label="Permalink to &quot;Forme Base&quot;">​</a></h2><p>Our recommended set up method is to use Forme Base, which is our base project server boilerplate.</p><p>Make sure your <a href="/documentation/getting-started/local-environment.html">local environment</a> is set up first then run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># with forme codegen</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">base</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project-name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># or with composer</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-project</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">forme/base</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project-name</span></span></code></pre></div><p>This will:</p><ol><li>Install the latest version of WordPress into the <code>public</code> folder (requires wp cli, curl or wget)</li><li>Add the wp-packagist composer repository</li><li>Install the wikimedia merge plugin so that we can pull in plugin and theme dependencies into the main vendor folder</li><li>Add the correct installer paths for plugins and themes if pulled in via composer</li><li>Install ACF (not the pro version)</li><li>Install the Symfony var-dumper component</li><li>Install Whoops error Pages</li><li>Install WP debug bar</li><li>Initialise <code>wp-config.php</code>, including prompting for your DB credentials, adding the <code>FORME_PRIVATE_ROOT</code> const, setting <code>WP_ENV</code> to <code>development</code> and requiring autoload. (requires wp cli)</li><li>Create a blank <code>.env</code> file</li><li>Include <code>lerna</code> configuration</li></ol><p>You will then want to:</p><ul><li>Edit <code>.env</code> if need be</li><li>Composer require any existing plugins or themes you need, or symlink local work into <code>wp-content</code> and <code>composer update</code></li><li><code>git init</code> and then keep this in version control during development</li><li>set up your wordpress site as usual in your browser or via <code>wp-cli</code></li></ul><p>You might need to delete <code>composer.lock</code> before installing any plugins or themes which depend on the merge plugin feature for the first time.</p><h3 id="valet-driver" tabindex="-1">Valet Driver <a class="header-anchor" href="#valet-driver" aria-label="Permalink to &quot;Valet Driver&quot;">​</a></h3><p>If you use Valet for local development, we&#39;ve got a driver for that. You should <code>cp</code> this into your local valet configuration if you haven&#39;t already:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">utils/FormeServerValetDriver.php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.config/valet/Drivers/FormeServerValetDriver.php</span></span></code></pre></div><h2 id="without-base" tabindex="-1">Without Base <a class="header-anchor" href="#without-base" aria-label="Permalink to &quot;Without Base&quot;">​</a></h2><p>If you don&#39;t want to use Base and prefer to do things more manually, you should first create an empty directory for your site.</p><p>Then start with this <a href="https://github.com/formewp/forme-base/blob/master/utils/composer.json" target="_blank" rel="noreferrer">composer.json</a> and copy it to the root directory of your site.</p><p>To initialise the project and also install the latest version of WordPress, run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-project</span></span></code></pre></div><p>This will install WordPress, plus all the basic required packages and plugins, including the various dev utilities. It will also prompt you for DB credentials and sort out your <code>wp-config.php</code> settings, and a blank <code>.env</code> file.</p><h3 id="composer-json" tabindex="-1">composer.json <a class="header-anchor" href="#composer-json" aria-label="Permalink to &quot;composer.json&quot;">​</a></h3><p>The composer file includes a few useful scripts, some of which will run on <code>create project</code>. These will:</p><ol><li>Install the latest version of WordPress into the <code>public</code> folder (requires wp cli, curl or wget)</li><li>Initialise <code>wp-config.php</code>, including prompting for your DB credentials, adding the <code>FORME_PRIVATE_ROOT</code> const, setting <code>WP_ENV</code> to <code>development</code> and requiring autoload. (requires <code>wp cli</code>)</li><li>Create a blank <code>.env</code> file</li></ol><p>This means that as long as you have either <code>wget</code>, <code>curl</code> or <code>wp cli</code> installed, WordPress will get installed in the <code>public</code> directory. The vendor folder stays in the root directory, which is necessary for security in a live environment. We can use the same composer file when we deploy.</p><p>The composer file also includes:</p><ul><li>necessary settings for wp-packagist</li><li>the wikimedia merge plugin so that we can pull in plugin and theme dependencies into the main vendor folder</li><li>correct installer paths for plugins and themes if pulled in via composer</li><li>the ACF dependency - we include this dependency here rather than in the core framework library as you might want to change this to ACF pro, which isn&#39;t available via the WordPress plugin directory.</li></ul><p>plus a few useful debugging utilities including:</p><ul><li>Symfony var-dumper component - use <code>dump()</code> instead of <code>var_dump()</code> to get pretty debugging output.</li><li>Whoops - nicely formatted user friendly error pages ftw</li><li>WP debug bar - A WP plugin with some very useful debugging output</li></ul><p>You can find out more about <a href="/documentation/development-workflow/debugging.html">debugging</a> here.</p><h3 id="without-wordpress" tabindex="-1">Without WordPress <a class="header-anchor" href="#without-wordpress" aria-label="Permalink to &quot;Without WordPress&quot;">​</a></h3><p>If you don&#39;t need to install WordPress because you&#39;ve already installed it some other way, you can just run:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><h3 id="wp-config-php" tabindex="-1">wp-config.php <a class="header-anchor" href="#wp-config-php" aria-label="Permalink to &quot;wp-config.php&quot;">​</a></h3><p>If you didn&#39;t use the automated configuration, you&#39;ll need to edit <code>public/wp-config.php</code> manually.</p><p>Straight after <code>ABSPATH</code>, you should define <code>FORME_PRIVATE_ROOT</code>. In a classic WP install, this is one up from your public folder (i.e. one up from <code>ABSPATH</code>).</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Local</span></span>
<span class="line"><span style="color:#82AAFF;">define</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">FORME_PRIVATE_ROOT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ABSPATH </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>You should require the autoload just after that definition:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">require_once</span><span style="color:#A6ACCD;"> FORME_PRIVATE_ROOT </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor//autoload.php</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>You can also set env to development if relevant:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WP_ENV</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>The framework uses this to determine whether Whoops should be enabled.</p><h3 id="bedrock" tabindex="-1">Bedrock <a class="header-anchor" href="#bedrock" aria-label="Permalink to &quot;Bedrock&quot;">​</a></h3><p>With Base and the suggested set up above, we&#39;re not trying to manage WordPress itself via Composer - the philosophy is to try to stick mostly to the traditional WordPress file and folder strucuture. If you do want to manage WordPress with composer, you should take a look at <a href="https://roots.io/bedrock/" target="_blank" rel="noreferrer">Bedrock</a>.</p><p>If you&#39;re running a Bedrock WordPress install, you will have to copy over the relevant/missing <code>merge-plugin</code>, <code>require</code> and <code>require-dev</code> bits below into the default Bedrock <code>composer.json</code> .</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">wikimedia/composer-merge-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^2.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">wpackagist-plugin/advanced-custom-fields</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^5.9</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">require-dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">symfony/var-dumper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^5.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">wpackagist-plugin/debug-bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">filp/whoops</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^2.9</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">merge-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">web/app/plugins/*/composer.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">web/app/themes/*/composer.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">recurse</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">replace</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">merge-dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Bedrock already has an autoload configured so you don&#39;t need to worry about that.</p><p><code>WP_ENV</code> is set in <code>.env</code> rather than <code>wp-config</code>, Forme uses the same syntax as Bedrock so will recognise whatever you have set there.</p><p>Finally, the best place to set <code>FORME_PRIVATE_ROOT</code> is in <code>config/application.php</code> straight after the <code>$root_dir</code> definition, since it&#39;s essentially the same thing plus a trailing slash.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Private root dir for Forme</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#82AAFF;">define</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">FORME_PRIVATE_ROOT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">root_dir </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="adding-external-packages" tabindex="-1">Adding external packages <a class="header-anchor" href="#adding-external-packages" aria-label="Permalink to &quot;Adding external packages&quot;">​</a></h2><p>You can now edit the composer file or <code>composer require</code> any plugins, themes and libraries that you need at the root level, in the same way as you would do in any non-WordPress php project.</p><p>After the first install, you should use <code>composer install</code>, <code>composer require</code> or <code>composer update</code> commands a usual.</p>`,53),t=[l];function p(r,c,i,d,u,y){return e(),o("div",null,t)}const F=s(n,[["render",p]]);export{h as __pageData,F as default};
