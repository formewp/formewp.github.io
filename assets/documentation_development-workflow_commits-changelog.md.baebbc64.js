import{_ as a,o as s,c as e,V as n}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"Commits & Changelog","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/development-workflow/commits-changelog.md","filePath":"documentation/development-workflow/commits-changelog.md","lastUpdated":1684512137000}'),o={name:"documentation/development-workflow/commits-changelog.md"},t=n(`<h1 id="commits-changelog" tabindex="-1">Commits &amp; Changelog <a class="header-anchor" href="#commits-changelog" aria-label="Permalink to &quot;Commits &amp; Changelog&quot;">​</a></h1><h2 id="conventional-commits" tabindex="-1">Conventional Commits <a class="header-anchor" href="#conventional-commits" aria-label="Permalink to &quot;Conventional Commits&quot;">​</a></h2><p>We use <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">conventional commits</a> for our commit messages. The main advantage is two fold - firstly, it encourages atomic commits, that is that commits should be small and targeted - a single feature, change or fix. This makes them easier to reason about and reverse. Secondly, it means that commit messages are parsable, which allows us to automate changelogs with git cliff (see below!)</p><h2 id="automating-changelogs" tabindex="-1">Automating Changelogs <a class="header-anchor" href="#automating-changelogs" aria-label="Permalink to &quot;Automating Changelogs&quot;">​</a></h2><p>We use <a href="https://github.com/orhun/git-cliff" target="_blank" rel="noreferrer">git cliff</a> to turn our conventional commit messages into <code>CHANGELOG.md</code>.</p><p>You can run the following before you create and push a new tag.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># replace with whatever the new tag is</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cliff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CHANGELOG.md</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v0.1.57</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># commit your changelog</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># then run your tag update - we&#39;re using bit here for convenience - it increments tag automatically</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># this is the same as running e.g. git tag v0.1.57 &amp;&amp; git push --tags</span></span>
<span class="line"><span style="color:#FFCB6B;">bit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">release</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bump</span></span></code></pre></div><p>Alternatively the codegen also has a convenience <code>bump</code> command which will bump your semver version tag, update the version number in your plugin main file or theme style.css, render a new changelog, commit and push for you all in one line.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># default to patch</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bump</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># you can also specify major, minor or patch</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bump</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">minor</span></span></code></pre></div>`,9),l=[t];function c(i,p,r,m,h,g){return s(),e("div",null,l)}const d=a(o,[["render",c]]);export{C as __pageData,d as default};
