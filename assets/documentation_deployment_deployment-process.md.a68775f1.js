import{_ as e,o,c as a,V as s}from"./chunks/framework.364d6ed5.js";const y=JSON.parse('{"title":"Deploying a Forme site","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/deployment/deployment-process.md","filePath":"documentation/deployment/deployment-process.md","lastUpdated":1728632147000}'),n={name:"documentation/deployment/deployment-process.md"},t=s(`<h1 id="deploying-a-forme-site" tabindex="-1">Deploying a Forme site <a class="header-anchor" href="#deploying-a-forme-site" aria-label="Permalink to &quot;Deploying a Forme site&quot;">​</a></h1><p>This is fairly similar to your local setup, but with a few differences for the remote server. This will depend on your specific server setup to a certain extent so YMMV.</p><h2 id="assumptions" tabindex="-1">Assumptions <a class="header-anchor" href="#assumptions" aria-label="Permalink to &quot;Assumptions&quot;">​</a></h2><ul><li>PHP ^8.1</li><li>wp cli</li><li>node 18.x lts/hydrogen (if using Forme Base)</li></ul><h2 id="deploying-forme-themes-and-plugins" tabindex="-1">Deploying Forme Themes and Plugins <a class="header-anchor" href="#deploying-forme-themes-and-plugins" aria-label="Permalink to &quot;Deploying Forme Themes and Plugins&quot;">​</a></h2><p>You will need to make sure your project directories make their way into the <code>themes</code> and <code>plugins</code> folders as appropriate, nothing different there. How you achieve that is completely up to you - you can scp or even (s)ftp them up like it&#39;s the 90s, although we heartily recommend publishing them to packagist so you can use composer and a Forme base installation repo.</p><p>If you&#39;re using Forme for non open source work and you need to keep your projects private, you should consider setting up your own <a href="https://github.com/composer/satis" target="_blank" rel="noreferrer">Satis</a> instance. Check out <a href="https://github.com/ludofleury/satisfy" target="_blank" rel="noreferrer">Satisfy</a> for a solution that&#39;s straightforward to set up.</p><p>After they are deployed, you then activate them in the usual way via the admin or wp-cli.</p><h2 id="deploying-a-forme-site-with-forme-base" tabindex="-1">Deploying a Forme site with Forme Base <a class="header-anchor" href="#deploying-a-forme-site-with-forme-base" aria-label="Permalink to &quot;Deploying a Forme site with Forme Base&quot;">​</a></h2><p>If you&#39;ve used Forme Base for your local dev environment, then by far the best solution is to use this same repo for your deployment too.</p><p>On a server you typically need to:</p><ul><li>copy or <code>git clone</code> your base install repo to a new directory</li><li>cd into the directory and run <code>composer setup-wordpress</code></li><li>Run <code>composer install --no-dev</code> and any other local scripts you need</li><li>Update <code>WP_ENV</code> in <code>public/wp-config.php</code> to something other than <code>development</code></li><li>Run <code>composer init-dotenv</code> and then fill <code>.env</code> in</li><li>Make <code>public</code> the web root, or symlink <code>public</code> to your existing web root path</li></ul><p>You should require your custom themes and plugins as composer dependencies - npm workspaces configuration will handle running <code>npm run build</code> across all of them if relevant.</p><h3 id="npm-workspaces" tabindex="-1">npm workspaces <a class="header-anchor" href="#npm-workspaces" aria-label="Permalink to &quot;npm workspaces&quot;">​</a></h3><p><a href="https://docs.npmjs.com/cli/v10/using-npm/workspaces" target="_blank" rel="noreferrer">npm Workspaces</a> allow us to automate npm installations and asset builds from the server root across all plugins and themes. It&#39;s specifically configured to trigger those whose directory name end with <code>-plugin</code> and <code>-theme</code> respectively (as is default for Forme), and that have a <code>package.json</code> with a <code>build</code> command defined.</p><p><code>npm install</code> will run in all matching themes and plugins.</p><p><code>npm run build -ws</code> will run <code>npm run build</code> in all matching themes and plugins.</p><p>These commands should run automatically on every composer update/install via the <code>post-update-cmd</code> and <code>post-install-cmd</code> hooks, but you can also run them directly from the command line.</p><p>You can checkout out the base installation&#39;s <code>composer.json</code> and <code>package.json</code> to see what&#39;s going on under the hood.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>One thing to bear in mind is that this all runs naively, so if you have some third party plugin or theme installed whose directory name ends in <code>-plugin</code> or <code>-theme</code> that contains <code>npm</code> scripts, they <em>will</em> run, which you might not want. Have a look at <code>package.json</code> if you need to change the configuration.</p></div><h2 id="deploying-a-forme-site-without-forme-base" tabindex="-1">Deploying a Forme site Without Forme Base <a class="header-anchor" href="#deploying-a-forme-site-without-forme-base" aria-label="Permalink to &quot;Deploying a Forme site Without Forme Base&quot;">​</a></h2><h3 id="composer-json" tabindex="-1">composer.json <a class="header-anchor" href="#composer-json" aria-label="Permalink to &quot;composer.json&quot;">​</a></h3><p>Alternatively, you should be able to copy the <code>composer.json</code> from your local development install. You&#39;ll need to make sure the various path refs match what&#39;s actually on the server if it&#39;s any different.</p><p>You should run all composer commands from the <code>root</code> directory, usually one up from <code>public</code>.</p><p>You can edit the composer file or <code>composer require</code> all plugins, themes and libraries that you need.</p><p>Then you can run <code>composer install</code> (or more usually for a production server <code>composer install --no-dev</code> if you don&#39;t want dev libraries to be installed)</p><h3 id="wp-config-php" tabindex="-1">wp-config.php <a class="header-anchor" href="#wp-config-php" aria-label="Permalink to &quot;wp-config.php&quot;">​</a></h3><p>Straight after <code>ABSPATH</code>, you need to define <code>FORME_PRIVATE_ROOT</code> with the root directory. On the server, this will be one level up from your public folder (i.e. one up from <code>ABSPATH</code>).</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">FORME_PRIVATE_ROOT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ABSPATH </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>You should then require the autoload just after that definition.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">require_once</span><span style="color:#A6ACCD;"> FORME_PRIVATE_ROOT </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendor//autoload.php</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>You can also set <code>WP_ENV</code> to development if required (not for production though!)</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WP_ENV</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>The framework uses this to determine whether Whoops should be enabled amongst other things.</p><h2 id="further-configuration" tabindex="-1">Further Configuration <a class="header-anchor" href="#further-configuration" aria-label="Permalink to &quot;Further Configuration&quot;">​</a></h2><h3 id="htaccess" tabindex="-1">.htaccess <a class="header-anchor" href="#htaccess" aria-label="Permalink to &quot;.htaccess&quot;">​</a></h3><p>Add the htaccess directives below (after the wordpress stuff) to make the composer json and any files in code related directories inaccessible.</p><div class="language-apacheconf"><button title="Copy Code" class="copy"></button><span class="lang">apacheconf</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">## Forme - Prevent code and config leaks</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;IfModule mod_rewrite.c&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/composer\\.(lock|json)$ / [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/app/.*$ - [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/assets/src/.*$ - [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/scripts/.*$ - [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/helpers/.*$ - [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/routes/.*$ - [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">RewriteRule (?:^|/).*/views/.*$ - [F,L]</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/IfModule&gt;</span></span></code></pre></div><p>You&#39;ll need to translate these to nginx directives if you&#39;re using it without apache.</p><h3 id="forme-env" tabindex="-1">forme.env <a class="header-anchor" href="#forme-env" aria-label="Permalink to &quot;forme.env&quot;">​</a></h3><p>This is the global <code>.env</code> file for all your Forme plugins and themes, and lives in your <code>FORME_PRIVATE_ROOT</code> directory. If it doesn&#39;t exist, you can create it. It should be named either <code>forme.env</code> or <code>.env</code>. If both of them exist, forme will use <code>forme.env</code></p><p>Copy over the environment variables from the <code>forme.env.example</code> file of any plugins and themes you want to activate, and define them in here.</p><h3 id="job-queue-cron" tabindex="-1">Job Queue Cron <a class="header-anchor" href="#job-queue-cron" aria-label="Permalink to &quot;Job Queue Cron&quot;">​</a></h3><p>If any of your activated plugins or themes use the job queue, you&#39;ll need to set up a cron job to trigger it. Add the following task and set it to run once a minute:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/your-base-installation/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wrangle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">queue:run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">2&gt;&amp;1</span></span></code></pre></div><p>This assumes you have <a href="/documentation/going-deeper/custom-commands.html"><code>wrangle</code></a> appropriately symlinked in your base installation.</p><h2 id="installing-packages" tabindex="-1">Installing packages <a class="header-anchor" href="#installing-packages" aria-label="Permalink to &quot;Installing packages&quot;">​</a></h2><p>You should run all composer commands from the <code>root</code> directory.</p><p>You can edit the composer file or <code>composer require</code> any plugins, themes and libraries that you need.</p><p>For production or staging server <code>composer install --no-dev</code> (this means the dev utilities <em>won&#39;t</em> get installed)</p><p>For dev server <code>composer install</code> (this means the dev utilities <em>will</em> get installed)</p><h2 id="updating-plugins-themes-and-libraries" tabindex="-1">Updating plugins, themes and libraries <a class="header-anchor" href="#updating-plugins-themes-and-libraries" aria-label="Permalink to &quot;Updating plugins, themes and libraries&quot;">​</a></h2><p>Plugins and themes can be updated in the WordPress admin in the normal way, or you can use composer on the server depending on how you set them up, in which case you would need to run <code>composer update vendor/package</code>.</p><p>For private plugins and themes, you will need to update those on the server, since by definition you won&#39;t be using the public WordPress directory. How you update those will depend on your specific setup - <code>scp</code>, <code>sftp</code> will work fine but ideally you should publish to a private <code>packagist</code> repository of some sort and use <code>composer</code>. We don&#39;t really advise pushing anything to a public web directory with <code>git</code> for security reasons - you could mitigate that with additional <code>htaccess</code> rules but better to avoid it altogether.</p><p>You will need to manually deactivate and reactivate plugins and themes if any schema migrations need to be run.</p><p>For standard php libraries (i.e. not WordPress themes or plugins), updating will of course always need to be done via the server and composer.</p>`,56),l=[t];function r(i,p,c,d,u,h){return o(),a("div",null,l)}const g=e(n,[["render",r]]);export{y as __pageData,g as default};
