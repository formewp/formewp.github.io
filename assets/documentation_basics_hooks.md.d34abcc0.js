import{_ as s,o as a,c as o,V as e}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/basics/hooks.md","filePath":"documentation/basics/hooks.md","lastUpdated":1684512137000}'),n={name:"documentation/basics/hooks.md"},l=e(`<h1 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">​</a></h1><p>Forme has a superbly clean way of organising WordPress hooks, via the <code>app/config/hooks.yaml</code> file. No more searching through hideously convoluted <code>functions.php</code> files.</p><h2 id="the-hook-config-yaml" tabindex="-1">The Hook Config Yaml <a class="header-anchor" href="#the-hook-config-yaml" aria-label="Permalink to &quot;The Hook Config Yaml&quot;">​</a></h2><p>Have a look at <code>app/config/hooks.yaml</code>. You&#39;ll notice there are two top levels, <code>actions</code> and <code>filters</code>. They do exactly what they say on the tin - you put your action hook definitions in the first and your filter hook definitions in the other.</p><h2 id="hook-definitions" tabindex="-1">Hook Definitions <a class="header-anchor" href="#hook-definitions" aria-label="Permalink to &quot;Hook Definitions&quot;">​</a></h2><p>Each definition looks something like this:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">actions</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">hook</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># The hook name</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Foo\\Bar\\ClassName</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># The fully qualified class name where the method you want to call is</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">__invoke()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># optional - defaults to \`__invoke()\` i.e. a callable class</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># optional - defaults to 10 as per WordPress</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">arguments</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># optional - defaults to 1</span></span></code></pre></div><p>That should all be pretty self-explanatory - but let&#39;s take a look at a concrete example.</p><p>Let&#39;s say we need to hook onto the <a href="https://developer.wordpress.org/reference/hooks/wp_check_filetype_and_ext/" target="_blank" rel="noreferrer">wp_check_filetype_and_ext</a> filter. We&#39;re going to have a service class <code>CsvMimeTypeCorrector</code> with a method <code>fix</code> that&#39;s going to handle this. We can see in the definition over on wordpress.org that we need 5 arguments. We therefore need to add this to the yaml:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">filters</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">hook</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wp_check_filetype_and_ext</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">My\\App\\Services\\CsvMimeTypeCorrector</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fix</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">arguments</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span></code></pre></div><p>Our filter is now all hooked up and ready to rumble.</p><p>The main advantage of doing it this way is that all of your hook definitions are clearly visible and labelled in one place - you won&#39;t need to hunt around as much. You should also find this much more readable than <code>add_action</code> and <code>add_filter</code> function calls.</p><h2 id="code-generation" tabindex="-1">Code generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code generation&quot;">​</a></h2><p>You can use the Forme codegen to help you wire up hooks to existing class methods.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">action</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">action_name</span></span></code></pre></div><p>or</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">filter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">filter_name</span></span></code></pre></div><p>The interactive cli will then ask you to select the class and method, and add the priority and argument count if you need to. It will then create a new entry in <code>hooks.yaml</code>.</p><p>You can of course then edit that entry manually and make any necessary adjustments as you see fit.</p>`,19),t=[l];function p(c,r,i,y,d,h){return a(),o("div",null,t)}const D=s(n,[["render",p]]);export{u as __pageData,D as default};
