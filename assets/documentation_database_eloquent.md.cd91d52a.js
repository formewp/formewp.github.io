import{_ as s,o as a,c as o,V as n}from"./chunks/framework.364d6ed5.js";const A=JSON.parse('{"title":"Eloquent","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/database/eloquent.md","filePath":"documentation/database/eloquent.md","lastUpdated":1701512450000}'),l={name:"documentation/database/eloquent.md"},p=n(`<h1 id="eloquent" tabindex="-1">Eloquent <a class="header-anchor" href="#eloquent" aria-label="Permalink to &quot;Eloquent&quot;">​</a></h1><p>Forme makes the built in WordPress objects available as <a href="https://laravel.com/docs/10.x/eloquent" target="_blank" rel="noreferrer">Eloquent</a> Models, so you can take full advantage of its easy to use syntax instead of trying to remember WordPress&#39; arcane incantations.</p><p>We use a similar approach to <a href="https://github.com/tareq1988/wp-eloquent" target="_blank" rel="noreferrer">wp-eloquent</a></p><h2 id="built-in-wordpress-models" tabindex="-1">Built-in WordPress Models <a class="header-anchor" href="#built-in-wordpress-models" aria-label="Permalink to &quot;Built-in WordPress Models&quot;">​</a></h2><ul><li>Post</li><li>Comment</li><li>Post Meta</li><li>User</li><li>User Meta</li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Models</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Post</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> Post</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">all</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//returns only posts with WordPress post_type &quot;post&quot;</span></span></code></pre></div><h2 id="posts" tabindex="-1">Posts <a class="header-anchor" href="#posts" aria-label="Permalink to &quot;Posts&quot;">​</a></h2><p>You can grab any standard WordPress post properties as you would expect:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">post_type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">post_title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">post_name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ID</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>There are a couple of preset accessors to provide syntactic sugar and get rid of some of the Hungarian notation redundancy.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// the following also works</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// alias of post_type</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// alias of post_title</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">slug</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// alias of post_name</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">content </span><span style="color:#676E95;font-style:italic;">// alias of post_content</span></span></code></pre></div><p>We&#39;ve also wrapped <code>get_permalink()</code> into a more concise <code>url</code> property.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>You can also grab meta from posts or users using magic properties in the form <code>key_name_meta</code>, for example:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">first_name_meta</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// the meta_value of the user&#39;s first_name meta</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">_wp_page_template_meta</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// the meta_value of the post&#39;s _wp_page_template</span></span></code></pre></div><p>You&#39;ll get back a string, so you&#39;ll need to take care of converting serialised values yourself for example.</p><p>For some use cases it&#39;s easier to use internal WordPress functions, although you can of course wrap them in Model methods if you want to simplify the syntax.</p><h2 id="custom-post-types" tabindex="-1">Custom Post Types <a class="header-anchor" href="#custom-post-types" aria-label="Permalink to &quot;Custom Post Types&quot;">​</a></h2><p>You can extend <code>Post</code> and add the <code>CustomPostable</code> trait to access Custom Post Types too. You can add the static <code>$postType</code> property to point it in the right direction, otherwise it will try to guess by taking the <code>snake_case</code> version of the class name.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Models</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Models</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">CustomPostable</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Models</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Post</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooBar</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">CustomPostable</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#F78C6C;font-style:italic;">@var</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#F78C6C;font-style:italic;">string</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">postType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo_bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="filter-post-by-post-status-and-post-type" tabindex="-1">Filter <code>Post</code> by <code>post_status</code> and <code>post_type</code> <a class="header-anchor" href="#filter-post-by-post-status-and-post-type" aria-label="Permalink to &quot;Filter \`Post\` by \`post_status\` and \`post_type\`&quot;">​</a></h3><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Models</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Post</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> Post</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">type</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">toArray</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// get pages</span></span>
<span class="line"><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">status</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">publish</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">toArray</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// get posts with publish status</span></span>
<span class="line"><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">type</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">status</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">publish</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">toArray</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// get pages with publish status</span></span></code></pre></div><h3 id="inserting-and-updating-posts" tabindex="-1">Inserting and updating Posts <a class="header-anchor" href="#inserting-and-updating-posts" aria-label="Permalink to &quot;Inserting and updating Posts&quot;">​</a></h3><p>You can call the usual Eloquent methods to update posts programmatically.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">post_title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">post_content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Lorem Ipsum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">();</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Inserting &amp; updating WordPress entities with Eloquent <em>should</em> work as you would expect, but you might sometimes need to ensure that specific properties are added manually, especially since hooks will tend to be ignored. You can always fall back to standard WordPress functions if you get unexpected results.</p></div><h3 id="acf-fields" tabindex="-1">ACF Fields <a class="header-anchor" href="#acf-fields" aria-label="Permalink to &quot;ACF Fields&quot;">​</a></h3><p>We&#39;re looking at implementing some kind of core pattern for ACF fields and relations, but for the time being, we recommend setting up <a href="https://laravel.com/docs/10.x/eloquent-mutators#accessors-and-mutators" target="_blank" rel="noreferrer">accessors and mutators</a>.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getFooAttribute</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F78C6C;">int</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// NB: we&#39;re casting to int and coercing falsy values to null here</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// you may or may not want this, it&#39;s just to illustrate that you may need to consider typing</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// since get_field returns are somewhat loose</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_field</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">ID</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setFooAttribute</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">void</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">update_field</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">ID</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use the above pattern, you need to be aware of a couple of gotchas.</p><ol><li>If you&#39;re calling these on a new post, you&#39;ll have to <code>save</code> it first so that the id exists.</li><li>The mutator saves the acf field to the db immediately, so you won&#39;t need to call <code>save</code> after setting the property.</li></ol></div><h2 id="post-hierarchy" tabindex="-1">Post Hierarchy <a class="header-anchor" href="#post-hierarchy" aria-label="Permalink to &quot;Post Hierarchy&quot;">​</a></h2><p>You can grab a post&#39;s direct children using the attribute.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// this will give you a collection of posts</span></span>
<span class="line"><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>You can also check if a post has any children with the <code>hasChildren</code> method.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bool result</span></span>
<span class="line"><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">hasChildren</span><span style="color:#89DDFF;">());</span></span></code></pre></div><h2 id="code-generation" tabindex="-1">Code Generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code Generation&quot;">​</a></h2><p>You can create a new post type model via the cli:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">model</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FooBar</span></span></code></pre></div><p>This will make a new post type model class <code>YourNameSpace\\YourApp\\Models\\FooBar</code> for the <code>foo-bar</code> post type.</p><p>You probably won&#39;t need this that often since models are created when you make a post type via the cli in any case.</p><h2 id="custom-tables-and-entities" tabindex="-1">Custom Tables and Entities <a class="header-anchor" href="#custom-tables-and-entities" aria-label="Permalink to &quot;Custom Tables and Entities&quot;">​</a></h2><p>If you&#39;ve created custom tables e.g. using migrations (i.e. not custom post types), you can extend <code>Illuminate\\Database\\Eloquent\\Model</code> directly to create your model class.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Models/FooBar.php</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">YourNameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Yourapp</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Models</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Illuminate</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Database</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Eloquent</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooBar</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Model</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You don&#39;t need to worry about including the wp table prefix in your definition. Forme uses Capsule under the hood and that&#39;s already all set up for you during the boot process!</p></div>`,44),e=[p];function t(c,r,y,i,F,D){return a(),o("div",null,e)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
