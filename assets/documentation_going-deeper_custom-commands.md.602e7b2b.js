import{_ as s,o as a,c as n,V as o}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"Custom Commands","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/going-deeper/custom-commands.md","filePath":"documentation/going-deeper/custom-commands.md","lastUpdated":1725516797000}'),e={name:"documentation/going-deeper/custom-commands.md"},l=o(`<h1 id="custom-commands" tabindex="-1">Custom Commands <a class="header-anchor" href="#custom-commands" aria-label="Permalink to &quot;Custom Commands&quot;">​</a></h1><p>Sometimes you need to write custom terminal commands to be used within a project, either in production or locally. Laravel has a tool called <a href="https://laravel.com/docs/artisan" target="_blank" rel="noreferrer">Artisan</a>, Symfony has <a href="https://symfony.com/doc/current/components/console.html" target="_blank" rel="noreferrer">Console</a>, WordPress has <a href="https:://wp-cli.org" target="_blank" rel="noreferrer">WP-Cli</a>, Rails has <a href="https://guides.rubyonrails.org/command_line.html" target="_blank" rel="noreferrer">Rake</a>, and so on. These can all usually be extended with custom commands.</p><p>Forme has <strong>Wrangle</strong>.</p><h2 id="writing-commands" tabindex="-1">Writing Commands <a class="header-anchor" href="#writing-commands" aria-label="Permalink to &quot;Writing Commands&quot;">​</a></h2><p>Like other similar php framework tools, Wrangle is based on <a href="https://symfony.com/doc/current/components/console.html" target="_blank" rel="noreferrer">Symfony Console</a>.</p><p>To create a custom command, you simply add a command class to the <code>app/Commands/Wrangle</code> directory in the corresponding namespace.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foobar</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">MyAwesomePlugin</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Commands</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Wrangle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Symfony</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Command</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Command</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Symfony</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Input</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">InputInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Symfony</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Output</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">OutputInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Symfony</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Input</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">InputOption</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#C792EA;">function</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Laravel</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Prompts</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyAwesomeCommand</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Command</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">defaultName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foobar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">configure</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// see https://symfony.com/doc/current/console.html</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">addOption</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">shortcut</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">f</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InputOption</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">VALUE_OPTIONAL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">description</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Foo description</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">setDescription</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">My Awesome Command</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">setHelp</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Help text for my awesome command</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// grab user options/arguments (don&#39;t forget to validate!)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getOption</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do/output stuff</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// return exit code</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Command</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">SUCCESS</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>You should then be able to go to the project root and run <code>./tools/wrangle foo</code> to run your command and see the output.</p><h2 id="symfony-console" tabindex="-1">Symfony Console <a class="header-anchor" href="#symfony-console" aria-label="Permalink to &quot;Symfony Console&quot;">​</a></h2><p>Since this is plain old Symfony Console app, you have access to all the usual Symfony Console functionality and helpers.</p><p>See <a href="https://symfony.com/doc/current/console/helpers.html" target="_blank" rel="noreferrer">here</a> for a list of available helpers.</p><h2 id="laravel-prompts" tabindex="-1">Laravel Prompts <a class="header-anchor" href="#laravel-prompts" aria-label="Permalink to &quot;Laravel Prompts&quot;">​</a></h2><p><a href="https://laravel.com/docs/10.x/prompts" target="_blank" rel="noreferrer">Laravel prompts</a> is also available and can be used alongside or instead of the Console helpers. It&#39;s a great library with some fantastic looking TUI components and interactions.</p><h2 id="symfony-process" tabindex="-1">Symfony Process <a class="header-anchor" href="#symfony-process" aria-label="Permalink to &quot;Symfony Process&quot;">​</a></h2><p>Sometimes you need to run external commands from within your command, otherwise known as &quot;shelling out&quot;. Maybe you need to call the globally installed WP Cli for example. You can do that with Symfony Process - see <a href="https://symfony.com/doc/current/components/process.html" target="_blank" rel="noreferrer">here</a> for more information.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Symfony</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Process</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Process</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">pluginList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Process</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">fromShellCommandline</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wp plugin list --format=json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">mustRun</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">getOutput</span><span style="color:#89DDFF;">();</span></span></code></pre></div><h2 id="symlinking-in-the-project-root" tabindex="-1">Symlinking in the project root <a class="header-anchor" href="#symlinking-in-the-project-root" aria-label="Permalink to &quot;Symlinking in the project root&quot;">​</a></h2><p>If you care about command line aesthetics, you can symlink <code>./tools/wrangle</code> into your project root.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./tools/wrangle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wrangle</span></span></code></pre></div><p>This means you can now run</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">./wrangle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#or</span></span>
<span class="line"><span style="color:#FFCB6B;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wrangle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo</span></span></code></pre></div><h2 id="code-generation" tabindex="-1">Code generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code generation&quot;">​</a></h2><p>You can use forme codegen to generate a new custom command.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MyAwesomeCommand</span></span></code></pre></div><h2 id="as-a-library" tabindex="-1">As a library <a class="header-anchor" href="#as-a-library" aria-label="Permalink to &quot;As a library&quot;">​</a></h2><p>Sometimes you want to be able to share a command across different projects and websites. You can do that by creating a composer/packagist library and putting your wrangle commands in there.</p><p>Just add your commands to the <code>Commands\\Wrangle</code> namespace as you would for a plugin or theme, and then make sure you explicitly require each command file in your composer.json.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">autoload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/Commands/Wrangle/MyAwesomeCommand.php</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/Commands/Wrangle/MyOtherCommand.php</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>After publishing it to a packagist repository, you can now require it like any other library.</p><h2 id="wrangle-vs-wp-cli-vs-forme-codegen" tabindex="-1">Wrangle vs WP CLI vs Forme Codegen <a class="header-anchor" href="#wrangle-vs-wp-cli-vs-forme-codegen" aria-label="Permalink to &quot;Wrangle vs WP CLI vs Forme Codegen&quot;">​</a></h2><p>The cli tool ecosystem within Forme is a little bit fragmented at the time of writing (2024-09-04).</p><p>The venerable <a href="https://wp-cli.org/" target="_blank" rel="noreferrer">WP Cli</a> is the official WordPress tool and covers most of the website management functionality from the WordPress admin. Like its counterparts in more modern PHP frameworks, it can be extended with custom commands. While this works very well for a lot of general use cases it does have its limitations - we&#39;ve run into library version conflicts in certain situations due to the way it&#39;s architected, especially since WordPress doesn&#39;t really do dependency management in any meaningful sense.</p><p><a href="https://github.com/formewp/forme-codegen" target="_blank" rel="noreferrer">Forme codegen</a> is our own globally installed development command line tool. It&#39;s aimed at local development environments, and is not designed for use in production nor for being extended.</p><p>We originally built <strong>Wrangle</strong> to fulfill the use case of needing project-level custom commands that for whatever reason would not work within WP Cli. Eventually we will be looking to merge Forme codegen&#39;s local development features into Wrangle, and subsequently deprecate Forme codegen. We are also considering whether we might eventually alias WP Cli (or at least a subset of it) within Wrangle. This should provide a more unified DX.</p><h2 id="how-does-wrangle-work-under-the-hood" tabindex="-1">How does Wrangle work under the hood? <a class="header-anchor" href="#how-does-wrangle-work-under-the-hood" aria-label="Permalink to &quot;How does Wrangle work under the hood?&quot;">​</a></h2><p>Like WP Cli, Artisan, Forme codegen and the rest, Wrangle is based on <a href="https://symfony.com/doc/current/components/console.html" target="_blank" rel="noreferrer">Symfony Console</a>.</p><p>Our latest <a href="https://github.com/formewp/forme-theme" target="_blank" rel="noreferrer">theme</a> and <a href="https://github.com/formewp/forme-plugin" target="_blank" rel="noreferrer">plugin</a> starter boilerplate has a <code>CommandRegistry</code> class which naively globs the files in the theme or plugin&#39;s <code>app/Commands/Wrangle</code> directory and requires them as long as we&#39;re in a cli context.</p><p>Wrangle command libraries need to add each command class file to the autoload files array in their <code>composer.json</code> file so that they&#39;re automatically included.</p><p>When the <code>wrangle</code> bin script is run from project root, it simply checks - again, naively - for any loaded classes whose namespace contains <code>Commands\\Wrangle</code> and adds them to a Symfony console application.</p>`,39),p=[l];function t(r,c,y,i,D,F){return a(),n("div",null,p)}const d=s(e,[["render",t]]);export{m as __pageData,d as default};
