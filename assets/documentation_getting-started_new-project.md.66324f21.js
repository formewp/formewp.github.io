import{_ as e,o as a,c as s,V as o}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"Starting a new plugin or theme project","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/getting-started/new-project.md","filePath":"documentation/getting-started/new-project.md","lastUpdated":1684568320000}'),n={name:"documentation/getting-started/new-project.md"},l=o(`<h1 id="starting-a-new-plugin-or-theme-project" tabindex="-1">Starting a new plugin or theme project <a class="header-anchor" href="#starting-a-new-plugin-or-theme-project" aria-label="Permalink to &quot;Starting a new plugin or theme project&quot;">â€‹</a></h1><h2 id="create-the-project" tabindex="-1">Create the project <a class="header-anchor" href="#create-the-project" aria-label="Permalink to &quot;Create the project&quot;">â€‹</a></h2><p>You can very easily create a new plugin or theme project with the code generation cli. Let&#39;s say you want to create a new plugin called &quot;Hello World&quot;. Firstly <code>cd</code> into wherever you want the repo to be, then:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span></span></code></pre></div><p>This will create a new directory called <code>hello-world-plugin</code> with all the necessary boiler plate code and even initialise the git repo for you! Check out the <a href="/documentation/development-workflow/debugging.html">development workflow</a> section too for further details on the various dev tools available.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Don&#39;t put your new project repo directly into the local WordPress install&#39;s plugin or theme folder - use symlinks instead! See below for more info on how to do that.</p></div><h3 id="vendor-name-space" tabindex="-1">Vendor Name Space <a class="header-anchor" href="#vendor-name-space" aria-label="Permalink to &quot;Vendor Name Space&quot;">â€‹</a></h3><p>As a default the cli will put the project into the generic <code>App</code> vendor namespace. If you need something else, you can use the <code>--vendor</code> option.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--vendor=FooBar</span></span></code></pre></div><h3 id="view-engine" tabindex="-1">View Engine <a class="header-anchor" href="#view-engine" aria-label="Permalink to &quot;View Engine&quot;">â€‹</a></h3><p>Forme supports Blade, Twig, Plates and Plates 4 view engines. The default is currently Plates 4, but you can use the <code>--view</code> option to select one of <code>blade</code>, <code>twig</code>, <code>plates</code> or <code>plates-4</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">theme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--view=blade</span></span></code></pre></div><h3 id="host-aliases" tabindex="-1">Host Aliases <a class="header-anchor" href="#host-aliases" aria-label="Permalink to &quot;Host Aliases&quot;">â€‹</a></h3><p>You might have different Github users (e.g a work and personal one) and might have assigned different host aliases to them in your git config. If you need to pass a host in to access an alternative git hub account, you can use the <code>--host</code> option.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--host=work</span></span></code></pre></div><p>If all has worked you should see something like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ðŸŽ‰ Created a new Forme plugin project! You can cd into hello-world-plugin and get coding!</span></span></code></pre></div><p>Congratulations!</p><h3 id="without-cli" tabindex="-1">Without cli <a class="header-anchor" href="#without-cli" aria-label="Permalink to &quot;Without cli&quot;">â€‹</a></h3><p>If you don&#39;t fancy using the cli or are struggling to install it for whatever reason, you can download the latest boilerplate release from github, unzip and follow the instructions below.</p><p>You&#39;ll need to search and replace the following strings (including file names):</p><p>Replace Me, replace-me, ReplaceMe, replace_me, VendorSpace</p><p>You can do this in your editor or this can be automated with gulp:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gulp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Theme Name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># whatever you want to call it</span></span></code></pre></div><p>If you use gulp, vendor namespace will be &quot;App&quot; by default, you will usually want to change that.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gulp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Theme Name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--vendor=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FooBar</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>The <code>--host</code> and <code>--view</code> options can also be set in the same way as for the codegen cli.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gulp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Theme Name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--vendor=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FooBar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--host=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">work</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--view=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blade</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>You&#39;ll want to delete the gulpfile, npm package files and node_modules directory after running the above, since they will no longer be needed.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gulpfile.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package-lock.json</span></span>
<span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node_modules</span></span></code></pre></div><p>You should then install the actual project package.json, which gives you access to all the webpack encore goodness. This one is in the repo as <code>package.json.stub</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json.stub</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span></span></code></pre></div><p>You can initialise <a href="https://github.com/orhun/git-cliff" target="_blank" rel="noreferrer">git cliff</a> to create your changelog configuration.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git-cliff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--init</span></span></code></pre></div><p>You should run <code>composer install</code> in the project folder to install all the local depedendencies. Note that this <em>won&#39;t</em> actually be imported and used by your main WordPress installation, this is so that dev cli tools (e.g. phpstan and captain hook) will be available within the project.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>You should then do your <code>git init</code> and initial <code>git commit</code>.</p><p>And finally, you should initialise Captain Hook to make sure default git hooks are installed.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hooks</span></span></code></pre></div><p>The Forme CodeGen <code>new</code> command follows this exact same process but does everything automatically. It&#39;s obviously much easier to use that!</p><h2 id="symlinks-ftw" tabindex="-1">Symlinks FTW <a class="header-anchor" href="#symlinks-ftw" aria-label="Permalink to &quot;Symlinks FTW&quot;">â€‹</a></h2><p>Before you actually start coding, you&#39;ll want to get your plugin or theme actually working within your WordPress installation, and you&#39;ll most likely find symlinking (aka symbolic linking) is the cleanest way of achieving this.</p><p>You might be tempted to place your project directly in the <code>plugins</code> or <code>themes</code> folder, and that would work just fine, but it&#39;s much easier to keep track of projects if they&#39;re all in one place, rather than trying to work on multiple git repos hidden away within multiple WordPress installations on your machine.</p><p>Your project repos can be anywhere you like on your machine, so you could put them all in a directory called <code>~/development</code> or <code>~/sites</code> or <code>~/projects</code> or wherever you prefer to keep your dev projects stored.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># ~/projects/</span></span>
<span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€â”€ foo-bar-laravel-app/</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€â”€ my-awesome-plugin/</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€â”€ my-awesome-theme/</span></span>
<span class="line"><span style="color:#A6ACCD;">â”œâ”€â”€ vue-thing-repo/</span></span>
<span class="line"><span style="color:#A6ACCD;">â””â”€â”€ zardoz-game/</span></span></code></pre></div><p>To symlink a specific project into a WordPress installation, you then need to do something like:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">full/path/to/hello-world-plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">full/path/to/wordpress/site/wp-content/plugins/</span></span></code></pre></div><p>or even easier with the codegen shortcut</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># you need to run this from the base installation directory</span></span>
<span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">base</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">link</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">full/path/to/hello-world-plugin</span></span></code></pre></div><p>Now as far as your file system is concerned, your repo is in its original location, <em>and</em> in the plugin folder. Neat, huh?</p><p>You can read more on symlinks here (they&#39;re as old as the hills!):</p><p><a href="https://en.wikipedia.org/wiki/Symbolic_link" target="_blank" rel="noreferrer">Symlinks on Wikipedia</a></p><h2 id="run-composer" tabindex="-1">Run Composer <a class="header-anchor" href="#run-composer" aria-label="Permalink to &quot;Run Composer&quot;">â€‹</a></h2><p>You can now run <code>composer install</code> from the WordPress installation public folder and any third party libs that the plugin needs (i.e. those that are defined in its composer.json) should get downloaded and installed into the WordPress project&#39;s vendor directory. If this is the first time you&#39;ve added a Forme project to this particular WordPress installation, it will also grab the core framework package.</p><h2 id="activate-the-plugin" tabindex="-1">Activate the plugin <a class="header-anchor" href="#activate-the-plugin" aria-label="Permalink to &quot;Activate the plugin&quot;">â€‹</a></h2><p>You can now visit your WordPress site admin and activate the plugin. It doesn&#39;t do a lot right now but it&#39;s a solid starting point.</p><h2 id="themes" tabindex="-1">Themes <a class="header-anchor" href="#themes" aria-label="Permalink to &quot;Themes&quot;">â€‹</a></h2><p>The process is pretty similar for themes, you need to replace <code>plugin</code> with <code>theme</code> at every step. When you activate the theme you should be presented with a very basic/vanilla Bootstrap 5 vibe. We&#39;ll look at both theme and plugin development in a bit more detail further in this guide.</p>`,58),t=[l];function p(r,i,c,d,h,u){return a(),s("div",null,t)}const g=e(n,[["render",p]]);export{C as __pageData,g as default};
