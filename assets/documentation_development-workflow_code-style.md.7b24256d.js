import{_ as e,o,c as t,V as a}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"Code Style","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/development-workflow/code-style.md","filePath":"documentation/development-workflow/code-style.md","lastUpdated":1684512137000}'),s={name:"documentation/development-workflow/code-style.md"},n=a(`<h1 id="code-style" tabindex="-1">Code Style <a class="header-anchor" href="#code-style" aria-label="Permalink to &quot;Code Style&quot;">​</a></h1><h2 id="php-cs-fixer" tabindex="-1">PHP CS Fixer <a class="header-anchor" href="#php-cs-fixer" aria-label="Permalink to &quot;PHP CS Fixer&quot;">​</a></h2><p>For all PHP code (except for views), we follow <a href="https://symfony.com/doc/current/contributing/code/standards.html" target="_blank" rel="noreferrer">Symfony</a>-ish, that is minus a couple of things we don&#39;t like, e.g. Yoda conditions.</p><p>Yes we know WordPress does <a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/" target="_blank" rel="noreferrer">its own thing code style wise</a>, but honestly? It&#39;s terrible! PHP has widely recognised modern standards via <a href="https://www.php-fig.org/" target="_blank" rel="noreferrer">PHP-fig</a>, which are used almost everywhere apart from ancient codebases like WordPress and Moodle.</p><p>We use <a href="https://cs.symfony.com/" target="_blank" rel="noreferrer">PHP CS Fixer</a> as part of our usual workflow and set up for this is included in the Forme theme and plugin boilerplates.</p><p>You can change the rules as you see fit by editing the <code>php-cs-fixer.dist</code> configuration file in the plugin or theme repo.</p><p>You can also run it on the command line within plugin and theme projects via the following composer commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cs:check</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># run without changing anything</span></span>
<span class="line"><span style="color:#FFCB6B;">composer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cs:fix</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># run all the changes</span></span></code></pre></div>`,8),r=[n];function l(c,i,p,d,h,f){return o(),t("div",null,r)}const y=e(s,[["render",l]]);export{u as __pageData,y as default};
