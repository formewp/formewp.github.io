import{C as s}from"./chunks/CodeHeading.74df3e27.js";import{o as e,c as t,J as a,E as p,C as o,a as n,V as l}from"./chunks/framework.364d6ed5.js";const c=o("h1",{id:"tips-for-writing-views",tabindex:"-1"},[n("Tips for Writing Views "),o("a",{class:"header-anchor",href:"#tips-for-writing-views","aria-label":'Permalink to "Tips for Writing Views"'},"​")],-1),r=o("p",null,"Here are some more general tips for writing dry, maintainable and re-usable views. We're using Plates here for our examples, but the concepts are applicable whichever templating library you choose.",-1),D=o("h2",{id:"foreach-is-a-partial-smell",tabindex:"-1"},[n("Foreach is a partial smell "),o("a",{class:"header-anchor",href:"#foreach-is-a-partial-smell","aria-label":'Permalink to "Foreach is a partial smell"'},"​")],-1),i=o("ul",null,[o("li",null,[n("If you're using a "),o("code",null,"foreach"),n(", think about whether the element you're repeating should be spun off into its own partial.")])],-1),y=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// views/foo.plate.php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// in practise you probably won&#39;t bother doing this for something so trivial!</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">elements </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">):?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]?&gt;&lt;/</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">endforeach</span><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div>`,1),F=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// views/foo.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">elements </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">):?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?=$</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">partials/bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">)?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">endforeach</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// views/partials/bar.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="repetition-demands-abstraction" tabindex="-1">Repetition demands abstraction <a class="header-anchor" href="#repetition-demands-abstraction" aria-label="Permalink to &quot;Repetition demands abstraction&quot;">​</a></h2><ul><li>It&#39;s useful to think in terms of generic and re-usable components, and look for ways to simplify. So if you wind up with several similar partial elements, consider whether they could be further abstracted, and where you could pass in config/variables instead. For example you might have cards representing different custom post types, all with image, title and body variables and elements, and maybe the only difference might be a css class to identify the post type. In this case, you might not need a different partial for every post type - just a generic card element view, into which you pass the css class along with the image, title and body variables.</li></ul>`,3),C=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// views/partials/foo-card.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">img src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;?=</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#C3E88D;">?&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">bodyText</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// views/partials/bar-card.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">img src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;?=</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#C3E88D;">?&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">bodyText</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// views/partials/baz-card.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card baz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">img src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;?=</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#C3E88D;">?&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">bodyText</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,1),A=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// we introduce $type and now we just need a single view</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// views/partials/generic-card.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">card </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">img src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;?=</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#C3E88D;">?&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">bodyText</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="no-variable-assignment-yes-even-iterators" tabindex="-1">No variable assignment, yes, even iterators <a class="header-anchor" href="#no-variable-assignment-yes-even-iterators" aria-label="Permalink to &quot;No variable assignment, yes, even iterators&quot;">​</a></h2><ul><li>You probably don&#39;t need a count iterator; with sequential arrays you can use the <code>key</code> in <code>foreach key =&gt; value</code>. If it&#39;s not a sequential array just reformat the variable in your controller.</li></ul>`,3),h=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// views/foo.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">elements </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">):?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is element </span><span style="color:#89DDFF;">no</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;?=$</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">endforeach</span><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div>`,1),d=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// views/foo.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">elements </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">):?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">This is element </span><span style="color:#89DDFF;">no</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;?=$</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">?&gt;&lt;/</span><span style="color:#A6ACCD;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;&lt;?=$</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]?&gt;&lt;/</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">endforeach</span><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div><h2 id="helpers-ftw" tabindex="-1">Helpers ftw <a class="header-anchor" href="#helpers-ftw" aria-label="Permalink to &quot;Helpers ftw&quot;">​</a></h2><ul><li>Create helper functions and/or service class methods if you need to grab or compute additional data within a view template that can&#39;t really be resolved at the controller stage or with standard control structures.</li></ul>`,3),g=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">postId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// retrieve and compute something</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_post</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">postId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">get_something</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> VendorSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">FooBar</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,1),u=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">things </span><span style="color:#89DDFF;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">thing</span><span style="color:#89DDFF;">):?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?=</span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">thing</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">postId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php </span><span style="color:#89DDFF;font-style:italic;">endforeach</span><span style="color:#89DDFF;">?&gt;</span></span></code></pre></div><ul><li>These functions should normally return values rather than actually echo anything out (i.e. in WordPress terms, you should be implementing <code>get_the_foo()</code>, not <code>the_foo()</code>) It&#39;s a view&#39;s job to output/echo html, <em>not</em> a function&#39;s. Use your best judgement here, just remember that one of the main points is that we&#39;re trying to keep view HTML and PHP logic consistently separate for clarity and code readability and avoid weird side effects. Of course many native WP functions - e.g. <code>wp_nav_menu</code>, <code>wp_footer</code> - which you will likely be using within view templates, absolutely <em>do</em> behave like view template render calls, and you&#39;ll see it in WordPress code snippets all over the internet, but we don&#39;t need to replicate this legacy of bad coding practise 😃</li><li>While we&#39;re on the topic of WordPress code snippets, <em>never</em> use template style php in your <code>helpers.php</code> functions or class methods. It&#39;s difficult to read and recent versions of php don&#39;t really deal with it very well - it often causes hard to find parsing bugs, especially if you have a bunch of them in the same file. Avoid it at all costs - if you&#39;re copy pasta-ing something off Stack Exchange, make sure you refactor it as required.</li><li>If you really do have to output html via a function, for example maybe you need to interact with WordPress core, or a plugin that follows that pattern, then you should use a view, don&#39;t echo it out directly. (Tip: you might want to think about whether you might be better off using a Controller class here)</li></ul>`,2),f=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// helpers.php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;div&gt;Avoid this, html output belong in views.&lt;/div&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// worse</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        Never </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> this</span><span style="color:#89DDFF;">!</span></span>
<span class="line"><span style="color:#A6ACCD;">        It often confuses the hell out of the php parser</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> you get weird bugs</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php }</span></span></code></pre></div>`,1),_=l(`<div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// the view calls the function (i.e. get pattern)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// helpers.php</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is a preferable pattern</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// views/foo.plate.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;?=</span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">()&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// the function calls the view (i.e. render/controller pattern)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// helpers.php</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ad_hoc_foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">view</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// views/foo.plate.php </span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Do this </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> you absolutely need your </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> to output something</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">    For example </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> it doesn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">t get called by a view.</span></span>
<span class="line"><span style="color:#C3E88D;">&lt;/div&gt;</span></span></code></pre></div><h2 id="context-variable-or-helpers" tabindex="-1">Context variable or helpers? <a class="header-anchor" href="#context-variable-or-helpers" aria-label="Permalink to &quot;Context variable or helpers?&quot;">​</a></h2><ul><li>Think about whether to define your variables in the controller or use existing functions directly in the view and about the trade offs. For example in an acf context, you could call <code>get_field</code> in controller and assign it to a variable, or just call <code>get_field</code> directly in view. If it returns a complex array with sub fields, then you&#39;re probably better off doing it in the controller so you can assign it to a variable. If it&#39;s a single field value then calling it directly in the view is probably fine. The trade off there is in terms of clarity of having explicit context variable declarations in the controller for that specific view, against the simplicity of just calling it at the point you need it.</li></ul>`,3),$=JSON.parse('{"title":"Tips for Writing Views","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/going-deeper/tips-for-writing-views.md","filePath":"documentation/going-deeper/tips-for-writing-views.md","lastUpdated":1684512137000}'),m={name:"documentation/going-deeper/tips-for-writing-views.md"},I=Object.assign(m,{setup(v){return(b,w)=>(e(),t("div",null,[c,r,D,i,a(s,{type:"default"},{default:p(()=>[n("ORIGINAL")]),_:1}),y,a(s,{type:"default"},{default:p(()=>[n("REFACTOR")]),_:1}),F,a(s,{type:"default"},{default:p(()=>[n("ORIGINAL")]),_:1}),C,a(s,{type:"default"},{default:p(()=>[n("REFACTOR")]),_:1}),A,a(s,{type:"bad"}),h,a(s,{type:"good"}),d,a(s,{type:"default"},{default:p(()=>[n("helpers.php")]),_:1}),g,a(s,{type:"default"},{default:p(()=>[n("foo.plate.php")]),_:1}),u,a(s,{type:"bad"}),f,a(s,{type:"good"}),_]))}});export{$ as __pageData,I as default};
