import{_ as s,o as a,c as e,V as n}from"./chunks/framework.364d6ed5.js";const d=JSON.parse('{"title":"Template Controllers","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/basics/template-controllers.md","filePath":"documentation/basics/template-controllers.md","lastUpdated":1684512137000}'),o={name:"documentation/basics/template-controllers.md"},l=n(`<h1 id="template-controllers" tabindex="-1">Template Controllers <a class="header-anchor" href="#template-controllers" aria-label="Permalink to &quot;Template Controllers&quot;">​</a></h1><p>In the files that WordPress uses when it matches a route (e.g. <code>page.php</code>, <code>single.php</code>), or within custom theme templates, you can use a controller class rather than writing procedural code.</p><p>We call these Template Controllers to distinguish them from ones that haven&#39;t been hoisted from WordPress templates. In most respects, they follow the same pattern as <a href="/documentation/basics/controllers.html">standard controllers</a></p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// single.php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">AppName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">YourNameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AppName</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Core</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">View</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Controllers</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AbstractController</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Psr</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Message</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ServerRequestInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SingleController</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AbstractController</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__invoke</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">input</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fields</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">single</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>The name of the controller is important</strong></p><ul><li>It should be under your app namespace (even though this doesn&#39;t follow PSR-4)</li><li>The class name must be a PascalCase version of the filename with the word Controller on the end (without spaces, dashes and underscores). If the controller name is not correct Forme will not throw any errors - instead you will just get a blank page.</li></ul><h2 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h2><p>In WordPress, you have a <code>404.php</code> file. PHP Classes cannot start with a number so following the usual naming convention will not work here. Instead Forme will look for a controller called <code>Error404Controller</code>.</p><p>Template controller classes won&#39;t work for the WordPress <code>header.php</code> and <code>footer.php</code> files. In the Forme theme boilerplate these have been done away with entirely in any case, and reimplemented as view partials, so you shouldn&#39;t need to use them.</p><h2 id="magic-to-be-aware-of" tabindex="-1">Magic to be aware of <a class="header-anchor" href="#magic-to-be-aware-of" aria-label="Permalink to &quot;Magic to be aware of&quot;">​</a></h2><p>When someone views a page that has a corresponding template controller, the <code>__invoke</code> method will automatically be called on that controller, and will have <code>$request</code> passed into it with <code>postId</code>, <code>fields</code> and <code>options</code> pre-filled as part of its body parameters. That <code>fields</code> value helpfully contains an array with all the ACF fields for the <code>postId</code>, the <code>options</code> value contains an array with all the global options page values.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The fields and options keys will all be converted to camelCase from the ACF default of snake_case. This is mainly so you can access <code>my_awesome_field</code> as <code>$myAwesomeField</code> in the view.</p></div><h2 id="custom-template-controllers" tabindex="-1">Custom Template Controllers <a class="header-anchor" href="#custom-template-controllers" aria-label="Permalink to &quot;Custom Template Controllers&quot;">​</a></h2><p>As a convention, we put custom template controllers in the <code>/template-controllers</code> directory.</p><p>You can add template names to template controllers and they will be picked up for selection in the WordPress admin:</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// template-controllers/FooBarController.php;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">AppName</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Controllers</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">YourNameSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AppName</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Core</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">View</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Controllers</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">AbstractController</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Template Name: Foo Bar</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooBarController</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AbstractController</span></span></code></pre></div><h2 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h2><p>Check out <a href="/documentation/basics/middleware.html#adding-middleware-to-template-controllers">this section</a> to find out how to add PSR 15 middleware to Template Controllers.</p><h2 id="code-generation" tabindex="-1">Code Generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code Generation&quot;">​</a></h2><p>You can use the code generator.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">template-controller</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FooBar</span></span></code></pre></div><p>This will create a new custom template controller called <code>FooBarController</code> in the <code>template-controllers</code> folder.</p>`,22),p=[l];function t(r,c,i,y,C,D){return a(),e("div",null,p)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
