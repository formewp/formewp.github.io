import{_ as s,o as a,c as n,V as e}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"Middleware","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/basics/middleware.md","filePath":"documentation/basics/middleware.md","lastUpdated":1686052798000}'),l={name:"documentation/basics/middleware.md"},o=e(`<h1 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h1><p>Forme supports <a href="https://www.php-fig.org/psr/psr-15/" target="_blank" rel="noreferrer">PSR 15 Middleware</a> for all route types as well as Template controllers.</p><p>Your middleware should implement <code>Psr\\Http\\Server\\MiddlewareInterface</code>.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Middleware</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Psr</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Message</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ResponseInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Psr</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Message</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ServerRequestInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Psr</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Server</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">MiddlewareInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Psr</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Server</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">RequestHandlerInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooMiddleware</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MiddlewareInterface</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ServerRequestInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RequestHandlerInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">handler</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ResponseInterface</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world foo middleware</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">handler</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>To avoid reinventing the wheel, there are many open source <a href="https://github.com/middlewares/awesome-psr15-middlewares" target="_blank" rel="noreferrer">PSR 15 middleware</a> libraries that you can use in your app.</p><h2 id="adding-middleware-to-routes" tabindex="-1">Adding Middleware to Routes <a class="header-anchor" href="#adding-middleware-to-routes" aria-label="Permalink to &quot;Adding Middleware to Routes&quot;">​</a></h2><p>You can use the <code>addMiddleware</code> method to add and chain middleware onto your routes.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// routes/routes.php</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// add middleware can take either a class string or an instance</span></span>
<span class="line"><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo/:bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooController</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">addMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">FooMiddleware</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// you can chain them to add more than one</span></span>
<span class="line"><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo/:bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooController</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">addMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">FooMiddleware</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">addMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">BarMiddleware</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="adding-middleware-to-template-controllers" tabindex="-1">Adding Middleware to Template Controllers <a class="header-anchor" href="#adding-middleware-to-template-controllers" aria-label="Permalink to &quot;Adding Middleware to Template Controllers&quot;">​</a></h2><p>Since template controllers rely on core WordPress routing rather than our defined routes, you can add middleware directly to the controller itself. There are two ways of doing this.</p><p>The preferred method is to set the <code>$middlewareQueue</code> property.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">middlewareQueue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">App</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Foo</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Middleware</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">FooMiddleware</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">];</span></span></code></pre></div><p>Alternatively you can also set middleware dynamically within the controller&#39;s <code>__construct()</code> method.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#82AAFF;">addMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">FooMiddleware</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="first-in-first-out" tabindex="-1">First In First Out <a class="header-anchor" href="#first-in-first-out" aria-label="Permalink to &quot;First In First Out&quot;">​</a></h2><p>The middleware is dispatched in &quot;first in first out&quot; order unlike some other implementations, which is a little easier to reason about - the order you see in the queue is exactly what you will get!</p><p>You can read more about the routing implementation <a href="/documentation/concepts/lifecycle.html#routing">here</a>.</p><h2 id="code-generation" tabindex="-1">Code Generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code Generation&quot;">​</a></h2><p>You can create an empty middleware class using the code generation cli.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">middleware</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FooBar</span></span></code></pre></div>`,20),p=[o];function t(r,c,F,i,y,D){return a(),n("div",null,p)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
