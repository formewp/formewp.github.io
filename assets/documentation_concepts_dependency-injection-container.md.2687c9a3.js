import{_ as s,o as n,c as a,V as e}from"./chunks/framework.364d6ed5.js";const A=JSON.parse('{"title":"Dependency Injection Container","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/concepts/dependency-injection-container.md","filePath":"documentation/concepts/dependency-injection-container.md","lastUpdated":1684512137000}'),o={name:"documentation/concepts/dependency-injection-container.md"},l=e(`<h1 id="dependency-injection-container" tabindex="-1">Dependency Injection Container <a class="header-anchor" href="#dependency-injection-container" aria-label="Permalink to &quot;Dependency Injection Container&quot;">​</a></h1><p>Forme uses <a href="https://php-di.org/" target="_blank" rel="noreferrer">PHP DI</a> under the hood, with autowiring enabled for added convenience. It creates a global singleton which is used across all Forme themes and plugins in a particular installation.</p><h2 id="what-is-dependency-injection" tabindex="-1">What is dependency injection? <a class="header-anchor" href="#what-is-dependency-injection" aria-label="Permalink to &quot;What is dependency injection?&quot;">​</a></h2><p>There&#39;s a great explanation <a href="https://php-di.org/doc/understanding-di.html" target="_blank" rel="noreferrer">over here</a>.</p><p>In practical development terms, it means typehinting necessary service classes (or even better, their interfaces) on class construction and saving them as properties which can then be accessed in the class methods. You don&#39;t need to instantiate those objects within those methods, nor care about what classes they need in their constructor, all object instantiation and class dependency management is delegated to the container.</p><p>You can see it at work in the following example. We&#39;re not using php 8&#39;s property promotion syntax here to make the code a bit more explicit.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Services</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// declare the required classes</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">BarBaz</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">AwesomeLibrary</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">SomeInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// declare the properties that will hold the classes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#F78C6C;font-style:italic;">@var</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#FFCB6B;font-style:italic;">BarBaz</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">barBaz</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#F78C6C;font-style:italic;">@var</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#FFCB6B;font-style:italic;">SomeInterface</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">concreteClass</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// typehint the classes/interfaces in your constructor</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">BarBaz</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">barBaz</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SomeInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">concreteClass</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// save them as properties</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// the container looks after selection &amp; instantiation</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// according to our typehints and automatically passes them in</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">barBaz </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">barBaz</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">concreteClass </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">concreteClass</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doFoo</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// the objects are available via the class properties</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">barBaz</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">engage</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$this-&gt;</span><span style="color:#A6ACCD;">concreteClass</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">doSomething</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Note that we don&#39;t need to worry about any classes that those injected classes in turn require. As long as they follow the same pattern of typehinting object dependencies, which many PHP libraries do these days, that should all be handled transparently for you by the container.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Some older classes or libraries don&#39;t follow the DI pattern at all, for example they might need configuration passed in during construct rather than typehinted objects. In those cases, you <em>will</em> need to instantiate them yourself with <code>new</code>.</p><p>DI is also clearly not particularly useful for static classes. Just use those as you normally would!</p></div><h2 id="accessing-the-container" tabindex="-1">Accessing the container <a class="header-anchor" href="#accessing-the-container" aria-label="Permalink to &quot;Accessing the container&quot;">​</a></h2><p>As long as you&#39;re within your app classes, you can assume that you&#39;re also within the container and you can and should use the above syntax.</p><p>But sometimes, you might be outside of that flow - the container might not have been instantiated yet or at all, for example during plugin activation.</p><p>Or the container might exist but your class won&#39;t get created via a hook defined in the Forme loader - for instance you might have a global helper function that needs to instantiate some class in your plugin that depends on DI to work. You can&#39;t use <code>new</code> as the class won&#39;t get its dependencies injected.</p><p>In this case, you could get the container with the <code>\\Forme\\getContainer()</code> helper function, and grab the class you need via the container&#39;s <code>get</code> method.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Some global function for use in views</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderContent</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// get the post id</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">postId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_queried_object_id</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we need a controller</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we can&#39;t easily use \`new\` as it has a bunch of typehinted dependencies</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we are outside of the app here so let&#39;s get the container</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">getContainer</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we then get the class we need using its fully qualified name</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">controller </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Foo</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Bar</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Controllers</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">SomeController</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we can now interact with is as normal</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">__invoke</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">postId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">postId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>There is a slightly simpler way too, if you don&#39;t need direct access to the container, in the form of the <code>\\Forme\\getInstance()</code> helper function, which is just a wrapper over the same procedure.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Some global function for use in views</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderContent</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// get the post id</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">postId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_queried_object_id</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we need a controller</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we can&#39;t easily use \`new\` as it has a bunch of typehinted dependencies</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we are outside of the app here so let&#39;s use getInstance to instantiate</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Foo</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Bar</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Controllers</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">SomeController</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// we can now interact with is as normal</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">__invoke</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">postId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">postId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="further-container-configuration" tabindex="-1">Further container configuration <a class="header-anchor" href="#further-container-configuration" aria-label="Permalink to &quot;Further container configuration&quot;">​</a></h2><p>There is nothing to stop you sorting out additional container configuration and adding further service definitions if you need to. Have a look at <code>src/helpers.php</code> in the core <code>forme/framework</code> repo to see what&#39;s going on.</p><div class="tip custom-block"><p class="custom-block-title">TODO</p><ul><li>Show some examples including definitions, interfaces and binding classes on the fly</li><li>Expand the bootstrap pattern in the boilerplate to include container definitions</li></ul></div>`,20),t=[l];function p(c,r,i,y,D,F){return n(),a("div",null,t)}const d=s(o,[["render",p]]);export{A as __pageData,d as default};
