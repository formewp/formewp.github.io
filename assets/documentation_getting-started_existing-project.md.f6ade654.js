import{_ as e,o as t,c as o,V as a}from"./chunks/framework.364d6ed5.js";const g=JSON.parse('{"title":"Working on an existing plugin or theme project","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/getting-started/existing-project.md","filePath":"documentation/getting-started/existing-project.md","lastUpdated":1684512137000}'),i={name:"documentation/getting-started/existing-project.md"},n=a('<h1 id="working-on-an-existing-plugin-or-theme-project" tabindex="-1">Working on an existing plugin or theme project <a class="header-anchor" href="#working-on-an-existing-plugin-or-theme-project" aria-label="Permalink to &quot;Working on an existing plugin or theme project&quot;">​</a></h1><h2 id="git-clone-the-project" tabindex="-1">Git clone the project <a class="header-anchor" href="#git-clone-the-project" aria-label="Permalink to &quot;Git clone the project&quot;">​</a></h2><p>First <code>cd</code> into wherever you want the repo to be, then git clone the project.</p><h2 id="set-up-symlinks" tabindex="-1">Set up Symlinks <a class="header-anchor" href="#set-up-symlinks" aria-label="Permalink to &quot;Set up Symlinks&quot;">​</a></h2><p>We&#39;ve already covered this in the new project section but we&#39;ll repeat this here. You can keep things more organised on your local machine by not putting your project repo directly into the local WordPress install&#39;s plugin or theme folder - use symlinks instead! See <a href="/documentation/getting-started/new-project.html#symlinks-ftw">here</a> for more info on how to achieve that.</p><h2 id="run-composer" tabindex="-1">Run Composer <a class="header-anchor" href="#run-composer" aria-label="Permalink to &quot;Run Composer&quot;">​</a></h2><p>You should run <code>composer install</code> from the WordPress installation public folder and any third party libs that the plugin or theme needs (i.e. those that are defined in its composer.json) will get downloaded and installed into the WordPress installation&#39;s vendor directory. If this is the first time you&#39;ve added a Forme project to this particular WordPress installation, it will also grab the core framework package.</p><h2 id="activate-the-plugin" tabindex="-1">Activate the plugin <a class="header-anchor" href="#activate-the-plugin" aria-label="Permalink to &quot;Activate the plugin&quot;">​</a></h2><p>You can now visit your WordPress site admin and activate the plugin or theme.</p>',9),r=[n];function s(l,c,h,d,p,u){return t(),o("div",null,r)}const _=e(i,[["render",s]]);export{g as __pageData,_ as default};
