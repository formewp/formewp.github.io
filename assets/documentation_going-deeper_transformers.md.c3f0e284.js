import{_ as s,o as a,c as e,V as n}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"Transformers","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/going-deeper/transformers.md","filePath":"documentation/going-deeper/transformers.md","lastUpdated":1684512137000}'),o={name:"documentation/going-deeper/transformers.md"},t=n(`<h1 id="transformers" tabindex="-1">Transformers <a class="header-anchor" href="#transformers" aria-label="Permalink to &quot;Transformers&quot;">​</a></h1><p>Transformers are a useful pattern to delegate model data preparation for presentation in your views or elsewhere in your app.</p><p>Model data is often stored in a different format to how the views might need it, or you might have some data in the request that needs converting. For very simple transformations it usually makes sense to handle these within the controller, or to add a mutator / casting method to the model (if you&#39;re using one and it makes sense)</p><p>But sometimes this preparation logic starts to feel too substantial, or conceptually awkward and out of scope, to stay within the controller or model. For example, you might not want your model to know too much about your view, or you might find that you need to combine several different models and data sources to compose the data that you need. You might also need to share this same logic across different controllers or services, and want to keep things DRY.</p><p>This where the <a href="https://mydnic.be/post/transformers-in-php" target="_blank" rel="noreferrer">transformer pattern</a> can be useful - it allows you to abstract this data preparation away. The concept is very simple, feed it the source data and it spits out the data you need, usually as a simple array.</p><p>Some frameworks have the concept of a <code>ViewModel</code>, but we&#39;ve opted for the more generic <code>Transformer</code> since we often find this pattern very useful outside of any kind of <code>View</code> context.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>We&#39;re using a transformer in the theme boilerplate for single data pages. In the <code>single</code> and <code>page</code> template controllers, we send the request to it to populate the <code>$context</code> that we eventually send to the view.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// app/Transformers/SinglePageTransformer.php</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VendorSpace</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">ReplaceMe</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Transformers</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Forme</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">ServerRequest</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SinglePageTransformer</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">transform</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ServerRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">array</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">postId           </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">postId</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">context          </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fields</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_the_post_thumbnail_url</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">postId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Transformers don&#39;t currently implement a specific interface, however you should stick to the general convention of calling this type of service a transformer and placing it in the <code>Transformers</code> directory and namespace.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you need something more full featured, we recommend taking a look at League&#39;s <a href="https://fractal.thephpleague.com/" target="_blank" rel="noreferrer">Fractal</a>.</p></div><h2 id="code-generation" tabindex="-1">Code Generation <a class="header-anchor" href="#code-generation" aria-label="Permalink to &quot;Code Generation&quot;">​</a></h2><p>You can use the codegen cli to create a new transformer.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forme</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">transformer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FooBar</span></span></code></pre></div><p>This will create a boilerplate file <code>app/Transformers/FooBarTransformer.php</code> for you.</p>`,15),l=[t];function p(r,c,i,y,D,d){return a(),e("div",null,l)}const m=s(o,[["render",p]]);export{C as __pageData,m as default};
