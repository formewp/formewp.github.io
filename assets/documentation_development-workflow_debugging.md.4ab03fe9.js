import{_ as e,o,c as a,V as s}from"./chunks/framework.364d6ed5.js";const n="/img/whoops.png",b=JSON.parse('{"title":"Debugging Tools","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/development-workflow/debugging.md","filePath":"documentation/development-workflow/debugging.md","lastUpdated":1684568320000}'),t={name:"documentation/development-workflow/debugging.md"},l=s('<h1 id="debugging-tools" tabindex="-1">Debugging Tools <a class="header-anchor" href="#debugging-tools" aria-label="Permalink to &quot;Debugging Tools&quot;">​</a></h1><p>Forme includes useful debugging and logging tools. A couple of these are available in dev mode only.</p><div class="tip custom-block"><p class="custom-block-title">Switching Modes</p><p>You can switch modes by updating the <code>WP_ENV</code> constant in your <code>wp-config.php</code> (or the <code>WP_ENV</code> .env variable if you&#39;re using bedrock). See also <code>WP_DEBUG</code> and <code>SAVEQUERIES</code> for Debugbar.</p></div><h2 id="whoops" tabindex="-1">Whoops <a class="header-anchor" href="#whoops" aria-label="Permalink to &quot;Whoops&quot;">​</a></h2><p>In dev mode, fatal exceptions are rendered via the awesome <a href="https://filp.github.io/whoops/" target="_blank" rel="noreferrer">Whoops</a>, so you get useful debugging data in a smart looking page.</p><p><img src="'+n+`" alt="Whoops" title="Whoops"></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Lower levels (e.g. notices and warnings) have been switched off and won&#39;t trigger Whoops, mainly due to WordPress core being absolutely full of them - our app would never run if we enabled them. However, these are available for you in the Debugbar.</p></div><p>You can configure your favourite editor to open files directly from Whoops editor pages - for this you need to set the <code>WHOOPS_EDITOR</code> environment variable in your <code>.env</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># can be one of emacs, idea, macvim, phpstorm, sublime, textmate, xdebug, vscode, atom, espresso or netbeans</span></span>
<span class="line"><span style="color:#A6ACCD;">WHOOPS_EDITOR</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">vscode</span></span></code></pre></div><h2 id="debugbar" tabindex="-1">Debugbar <a class="header-anchor" href="#debugbar" aria-label="Permalink to &quot;Debugbar&quot;">​</a></h2><p><a href="https://wordpress.org/plugins/debug-bar/" target="_blank" rel="noreferrer">DebugBar</a> is a WordPress plugin, and is available for you in wp-admin. Activate it and you&#39;ll get query, cache, and other helpful debugging information.</p><p>When <code>WP_DEBUG</code> is enabled it also tracks PHP Warnings and Notices to make them easier to find.</p><p>When <code>SAVEQUERIES</code> is enabled, mysql queries are tracked and displayed.</p><h2 id="var-dumper" tabindex="-1">Var Dumper <a class="header-anchor" href="#var-dumper" aria-label="Permalink to &quot;Var Dumper&quot;">​</a></h2><p>The <a href="https://symfony.com/doc/current/components/var_dumper.html" target="_blank" rel="noreferrer">Symfony VarDumper</a> component provides a better <code>dump()</code> function that you can use instead of <code>var_dump</code> while you&#39;re in dev mode.</p><p>You can also <code>dump and die</code> with <code>dd()</code>!</p><h2 id="monolog" tabindex="-1">Monolog <a class="header-anchor" href="#monolog" aria-label="Permalink to &quot;Monolog&quot;">​</a></h2><p><a href="https://github.com/Seldaek/monolog" target="_blank" rel="noreferrer">Monolog</a> is available for all your logging needs, you can typehint for <code>Psr\\Log\\LoggerInterface\\LoggerInterface</code> or grab an instance via <code>Forme\\log()</code>.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">Psr</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Log</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">LoggerInterface</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooBarService</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LoggerInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>By default, logs are output to <code>FORME_PRIVATE_ROOT/logs/forme_DATE.log</code> files if <code>WP_ENV</code> is not set to <code>production</code>.</p><p>If <code>WP_ENV</code> is set to <code>production</code>, then logs will be stored as <a href="/documentation/going-deeper/events.html">Events</a>.</p><p>You can override this behaviour by setting the <code>LOG_HANDLER</code> environment variable to either <code>file</code> or <code>event</code> in your <code>.env</code> configuration.</p>`,22),r=[l];function p(c,i,d,g,u,h){return o(),a("div",null,r)}const y=e(t,[["render",p]]);export{b as __pageData,y as default};
